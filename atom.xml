<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>可乐加冰</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-08-03T13:27:33.356Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>HJY</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue 和 React 区别</title>
    <link href="http://example.com/2023/05/22/Vue%E5%92%8CReact%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2023/05/22/Vue%E5%92%8CReact%E5%8C%BA%E5%88%AB/</id>
    <published>2023-05-22T12:45:44.000Z</published>
    <updated>2023-08-03T13:27:33.356Z</updated>
    
    <content type="html"><![CDATA[<p>Vue 和 React 和共通之处在于：</p><ul><li>数据驱动视图</li><li>组件化</li><li>Virtual DOM</li></ul><p>不同之处在于：</p><ul><li>核心思想</li><li>写法</li><li>Diff 算法</li><li>响应式原理</li></ul><h2 id="数据驱动视图"><a href="#数据驱动视图" class="headerlink" title="数据驱动视图"></a>数据驱动视图</h2><p>数据变化的时候，相应的视图会得到更新，开发者只需要关注数据的变化而不用再去手动的操作DOM</p><p>Vue 数据驱动是通过 MVVM 这种框架来实现的，MVVM框架主要包含3个部分:Model、View和 ViewModel</p><ul><li>Model:指的是数据部分，对应到前端就是 JavaScript 对象</li><li>View:指的是视图部分，对应前端就是 DOM</li><li>ViewModel:就是连接视图与数据的中间件（getter/setter）</li></ul><p>再来看 React， 需要先了解以下概念</p><ul><li>pending：当前所有等待更新的<code>state队列</code></li><li>isBatchingUpdates：React中用于标识当前是否处理批量更新状态，默认false</li><li>dirtyComponent：当前所有待更新state的<code>组件队列</code></li></ul><p>React 通过<code>setState</code>实现数据驱动视图，通过<code>setState</code>来引发一次组件的更新过程从而实现页面的重新渲染(除非shouldComponentUpdate返回false)：</p><ul><li><code>setState()</code>首先将接收的第一个参数state存储在pending队列中（state）</li><li>判断当前React是否处于批量更新状态，是的话就将需要更新state的组件添加到dirtyComponents中（组件）</li><li>不是的话，它会遍历dirtyComponents的所有组件，调用updateComponent方法更新每个dirty组件（开启批量更新事务）</li></ul><h2 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h2><p>Vue</p><ul><li>Vue 依赖手机，自动优化，数据可变</li><li>Vue 递归监听 data 的所有属性，直接修改</li><li>当数据发生改变，自动找到引用数据的组件，进行重新渲染</li></ul><p>React</p><ul><li>React 基于状态机，手动优化，数据不可变，需要 setState 驱动新的 State 替换老的 State</li><li>当数据改变时，以组件为根目录，默认全部重新渲染</li></ul><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><ul><li>组件是独立和可复用的代码组织单元，它能够大幅提高应用开发效率、测试性、复用性，使开发者使用小型、独立和通常可复用的组件构建大型应用</li><li>调试方便，可维护性高，使得整个应用的耦合度降低</li></ul><p>Vue 和 React 通过将页面拆分成一个一个小的可复用单元来提高代码的复用率和开发效率</p><ul><li>React 推荐的做法是JSX + inline style, 也就是把 HTML 和 CSS 全都写进 JavaScript 中,即 all in js</li><li>Vue 推荐的做法是 template 的单文件组件格式(简单易懂，从传统前端转过来易于理解),即 HTML、CSS、JS 写在同一个文件(vue也支持JSX写法)</li></ul><h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><p>虚拟 DOM（Virtual DOM）本质上是JS 和 DOM 之间的一个映射缓存，它在形态上表现为一个能够描述 DOM 结构及其属性信息的 JS 对象，它主要存储在内存中。主要来说：</p><ul><li>虚拟dom是一个js对象，存储在内存之中。</li><li>虚拟dom能够描述真实dom（存在一个对应关系）</li><li>当数据变化的时候，生成新的DOM，对比新旧虚拟 DOM 的差异，将差异更新到真实 DOM 上（也就是Diff过程）</li><li>减少直接操作 DOM（框架给我们提供了屏蔽底层 DOM 书写的方式，减少频繁的整更新 DOM ，同时也使得数据驱动视图）</li><li>为函数式UI编程提供可能</li><li>可以跨平台，渲染到DOM（web）之外的平台。比如ReactNative，Weex</li></ul><p>Vue 和 React 通用流程：vue template/react jsx -&gt; render函数 -&gt; 生成VNode -&gt; 当有变化时，新老VNode Diff -&gt; Diff算法对比，并真正去更新真实 DOM</p><p>两者对Diff算法的优化基本上思路是相同的（Diff 算法借助元素的 Key 判断元素是新增、删除、修改，从而减少不必要的元素重渲染）：</p><ul><li>tag不同认为是不同节点</li><li>只比较同一层级，不跨级比较</li><li>同一层级的节点用key唯一标识，tag和key都相同则认为是同一节点</li></ul><p>DOM 的更新策略不同：</p><ul><li>React 会自顶向下全 Diff<br>  当状态发生改变时，组件树就会自顶向下的全 Diff, 重新 render 页面， 重新生成新的虚拟 DOM TREE, 新旧 DOM TREE 进行比较， 进行 patch 打补丁方式，局部更新 DOM</li><li>Vue 会跟踪每一个组件的依赖关系,不需要重新渲染整个组件树<br>  把这些 data 属性 全部转为 getter/setter。同时 watcher 实例对象会在组件渲染时，将属性记录为dep，当 dep 项中的 setter 被调用时，通知 watcher 重新计算，使得关联组件更新</li></ul><h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><p>Vue 的核心思想是尽可能的降低前端开发的门槛，是一个灵活易用的渐进式双向绑定的MVVM框架。它的整体思想仍然是拥抱经典的 HTML (结构)+ CSS (表现)+ JS (行为)的形式，通过 getter/setter 以及一些函数的劫持，能精确知道数据变化，不需要特别的优化就能达到很好的性能</p><p>React 的特色在于函数式编程、数据不可变以及单向数据流的理念。函数式编程最大的好处是其稳定性（无副作用）和可测试性（输入相同，输出一定相同），所以通常大家说的React适合大型应用，根本原因还是在于其函数式编程</p><h3 id="核心思想不同导致的一些差异"><a href="#核心思想不同导致的一些差异" class="headerlink" title="核心思想不同导致的一些差异"></a>核心思想不同导致的一些差异</h3><p>主要是写法和API差异</p><p>Vue 推崇 template模板、options API，这样更契合传统 Web 开发者的直觉和习惯，但也不可避免的引入了更多概念和API，比如template模板中需要理解slot、filter、指令等概念和api，options API中需要理解watch、computed（依赖收集）等概念和api</p><p>而 React 推崇 JSX、 HOC、 all in JS，其本身由于 FP 的特性，本质上核心只有一个Virtual DOM + Diff算法，所以API非常少</p><h2 id="组件通信方法"><a href="#组件通信方法" class="headerlink" title="组件通信方法"></a>组件通信方法</h2><p>Vue:</p><ul><li>父-&gt;子<ul><li>props: 父组件使用props属性向子组件传递数据</li><li>slot</li><li>$refs</li><li>$children</li></ul></li><li>子-&gt;父<ul><li>事件形式：子$emit，父监听</li><li>$parent</li></ul></li><li>兄弟组件<ul><li>中央总线new Bus()，发布/订阅模式，其实此方法也可以用在跨级、父子间通讯</li><li>借助同一父组件通过props传递数据，也就是利用父组件实现中转传递(会增加子组件和父组件之间的耦合度)</li></ul></li><li>跨级组件<ul><li>层层组件传递props</li><li>provide/inject</li></ul></li></ul><p>React:</p><ul><li>父-&gt;子<ul><li>props: 父组件使用props属性向子组件传递数据</li><li>ref: 获取整个子组件对象，可以调用子组件中的函数</li></ul></li><li>子-&gt;父<ul><li>利用回调函数：父组件使用props属性向子组件传递一个函数，子组件携带自己的数据并通过调用该函数向父组件传递数据</li></ul></li><li>兄弟组件<ul><li>自定义事件机制：发布/订阅模式，通过向事件对象上添加监听器和触发事件来实现组件之间的通信</li><li>借助同一父组件通过props传递数据，也就是利用父组件实现中转传递(会增加子组件和父组件之间的耦合度)</li></ul></li><li>跨级组件<ul><li>层层组件传递props</li><li>使用context：生产/消费者模式</li></ul></li></ul><h2 id="事件机制"><a href="#事件机制" class="headerlink" title="事件机制"></a>事件机制</h2><p>Vue:</p><ul><li>原生事件使用标准 Web 事件</li><li>Vue组件自定义事件机制，是父子组件通信基础</li></ul><p>React:</p><ul><li>自身实现了一套自己的事件机制，包括事件注册、事件的合成、事件冒泡、事件派发等</li><li>所有事件并没有绑定到具体的dom节点上而是绑定在了document 上，然后由统一的事件处理程序来处理，同时也是基于浏览器的事件机制（冒泡），所有节点的事件都会在 document 上触发</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Vue 和 React 和共通之处在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据驱动视图&lt;/li&gt;
&lt;li&gt;组件化&lt;/li&gt;
&lt;li&gt;Virtual DOM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同之处在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;核心思想&lt;/li&gt;
&lt;li&gt;写法&lt;/li&gt;
&lt;li&gt;D</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="React" scheme="http://example.com/tags/React/"/>
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>二进制数据处理（尚未完成）</title>
    <link href="http://example.com/2023/03/22/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2023/03/22/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</id>
    <published>2023-03-22T13:45:32.000Z</published>
    <updated>2023-07-19T01:25:53.608Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="ArrayBuffer，二进制数组"><a href="#ArrayBuffer，二进制数组" class="headerlink" title="ArrayBuffer，二进制数组"></a>ArrayBuffer，二进制数组</h2><p>在web开发中，经常要用到二进制数据来处理文件相关的操作，比如上传、下载各种文档和图像</p><p><strong>在JS中基本的的二进制对象是<code>ArrayBuffer</code>，它本质上是一段固定长度的连续内存空间的引用</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;ArrayBuffer，二进制数组&quot;&gt;&lt;a href=&quot;#ArrayBuffe</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS继承的几种方式</title>
    <link href="http://example.com/2023/03/07/JS%E7%BB%A7%E6%89%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2023/03/07/JS%E7%BB%A7%E6%89%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2023-03-07T13:32:01.000Z</published>
    <updated>2023-08-03T13:30:37.654Z</updated>
    
    <content type="html"><![CDATA[<p>许多OO语言都支持两种继承方式：</p><ul><li>接口继承</li><li>实现继承</li></ul><p>而 ECMA 只支持实现继承，主要依靠原型链来实现</p><h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><p>核心思想：重写原型对象，代之以一个新类型的实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;Parent&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child1 = <span class="keyword">new</span> Child();</span><br><span class="line">child1.getName(); <span class="comment">// Parent</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child2 = <span class="keyword">new</span> Child();</span><br><span class="line">child2.getName(); <span class="comment">// Parent</span></span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>父类新增原型方法/属性，子类都能访问到</li><li>简单，易于实现</li></ul><p>缺点：</p><ul><li>引用类型的属性被所有实例共享</li><li>创建子类实例时，不能像父类构造函数传参</li></ul><h2 id="借用构造函数继承（经典继承）"><a href="#借用构造函数继承（经典继承）" class="headerlink" title="借用构造函数继承（经典继承）"></a>借用构造函数继承（经典继承）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.color = [<span class="string">&#x27;red&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="built_in">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child1 = <span class="keyword">new</span> Child(<span class="string">&#x27;Child1&#x27;</span>);</span><br><span class="line">child1.color.push(<span class="string">&#x27;green&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(child1); <span class="comment">// Child &#123; name: &#x27;Child1&#x27;, color: [ &#x27;red&#x27;, &#x27;green&#x27; ] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child2 = <span class="keyword">new</span> Child(<span class="string">&#x27;Child2&#x27;</span>);</span><br><span class="line">child2.color.push(<span class="string">&#x27;blue&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(child2); <span class="comment">// Child &#123; name: &#x27;Child2&#x27;, color: [ &#x27;red&#x27;, &#x27;blue&#x27; ] &#125;</span></span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>避免了引用类型的属性被所有子类实例所共享</li><li>可以在子类中向父类构造函数传参</li></ul><p>缺点：</p><ul><li>无法实现函数复用</li><li>在父类原型中定义的方法，对于子类不可见</li></ul><h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p>这种方式的核心思想在于:通过结合原型链继承和经典继承两种方式，融合了二者的优点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.color = [<span class="string">&#x27;red&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 继承属性</span></span><br><span class="line">    Parent.call(<span class="built_in">this</span>, name);</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承方法</span></span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line">Child.prototype.constructor = Child;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child1 = <span class="keyword">new</span> Child(<span class="string">&#x27;Child1&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">child1.color.push(<span class="string">&#x27;green&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(child1); <span class="comment">// Child &#123; name: &#x27;Child1&#x27;, color: [ &#x27;red&#x27;, &#x27;green&#x27; ], age: 18 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child2 = <span class="keyword">new</span> Child(<span class="string">&#x27;Child2&#x27;</span>, <span class="number">17</span>);</span><br><span class="line">child2.color.push(<span class="string">&#x27;blue&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(child2); <span class="comment">// Child &#123; name: &#x27;Child2&#x27;, color: [ &#x27;red&#x27;, &#x27;blue&#x27; ], age: 17 &#125;</span></span><br></pre></td></tr></table></figure><p>缺点：</p><ul><li>调用了两次父类构造函数</li></ul><h2 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h2><p>核心思想：用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是 ES5 Object.create 的模拟实现，将传入的对象作为创建的对象的原型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    F.prototype = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;person&#x27;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&#x27;daisy&#x27;</span>, <span class="string">&#x27;kelly&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person1 = createObj(person);</span><br><span class="line"><span class="keyword">const</span> person2 = createObj(person);</span><br><span class="line"></span><br><span class="line">person1.name = <span class="string">&#x27;person1&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person1); <span class="comment">// &#123; name: &#x27;person1&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line">person2.friends.push(<span class="string">&#x27;taylor&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person2); <span class="comment">// &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person); <span class="comment">// &#123; name: &#x27;person&#x27;, friends: [ &#x27;daisy&#x27;, &#x27;kelly&#x27;, &#x27;taylor&#x27; ] &#125;</span></span><br></pre></td></tr></table></figure><p>缺点:</p><ul><li>包含引用类型的属性值始终会共享相应的值</li></ul><h2 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h2><p>核心思想：创建一个仅用于封装继承过程的函数，并在该函数中以某种形式来增强对象，最后返回该对象（和原型式继承紧密相关）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> clone = <span class="built_in">Object</span>.create(o);</span><br><span class="line">    clone.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Hi&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;person&#x27;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&#x27;daisy&#x27;</span>, <span class="string">&#x27;kelly&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：</p><ul><li>不能复用函数而降低效率</li><li>无法传递参数</li></ul><h2 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h2><p>核心思想：结合借用构造函数产地参数和寄生模式实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    F.prototype = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">child, parent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> prototype = createObj(parent.prototype); <span class="comment">// 创建对象</span></span><br><span class="line">    prototype.constructor = parent; <span class="comment">// 增强对象</span></span><br><span class="line">    child.prototype = prototype; <span class="comment">// 指定对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.color = [<span class="string">&#x27;red&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="built_in">this</span>, name);</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(Child, Parent);</span><br><span class="line"></span><br><span class="line">Parent.prototype.getAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child1 = <span class="keyword">new</span> Child(<span class="string">&#x27;Child1&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">child1.color.push(<span class="string">&#x27;green&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(child1); <span class="comment">// Parent &#123; name: &#x27;Child1&#x27;, color: [ &#x27;red&#x27;, &#x27;green&#x27; ], age: 18 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child2 = <span class="keyword">new</span> Child(<span class="string">&#x27;Child2&#x27;</span>, <span class="number">17</span>);</span><br><span class="line">child2.color.push(<span class="string">&#x27;blue&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(child2); <span class="comment">// Parent &#123; name: &#x27;Child2&#x27;, color: [ &#x27;red&#x27;, &#x27;blue&#x27; ], age: 17 &#125;</span></span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>高效率：只调用了一次父类构造函数</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《JavaScript高级程序教程（第3版）》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;许多OO语言都支持两种继承方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口继承&lt;/li&gt;
&lt;li&gt;实现继承&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而 ECMA 只支持实现继承，主要依靠原型链来实现&lt;/p&gt;
&lt;h2 id=&quot;原型链继承&quot;&gt;&lt;a href=&quot;#原型链继承&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>事件总线机制</title>
    <link href="http://example.com/2023/01/12/%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/2023/01/12/%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF%E6%9C%BA%E5%88%B6/</id>
    <published>2023-01-12T14:19:22.000Z</published>
    <updated>2023-07-19T01:24:30.830Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>事件总线(EventBus) 是一种消息传递的方式</p><p>它可以让两个没有关联的组件进行通信，起到数据传输的作用</p><p>举个例子，当<code>module N</code>发布了<code>Event 1</code>消息，订阅该消息的<code>module 1</code>就会收到相关消息（过程如下所示）</p><p><img src="https://raw.githubusercontent.com/HJY-xh/pictures/master/pictures/202302071430325.png"></p><h2 id="场景举例"><a href="#场景举例" class="headerlink" title="场景举例"></a>场景举例</h2><p>现在有一所学校，学校里面有一些事件发生，学生能够根据事件类型做出相应的动作</p><p>用代码表述</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EventBus就是事件总线，这里可以思考一下它应该具备什么功能以及如何编写</span></span><br><span class="line"><span class="keyword">let</span> EB = <span class="keyword">new</span> EventBus();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生对事件类型做出的反应</span></span><br><span class="line">EB.$on(<span class="string">&#x27;上课&#x27;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">`学生<span class="subst">$&#123;name&#125;</span>到上课地点`</span>);</span><br><span class="line">&#125;)</span><br><span class="line">EB.$on(<span class="string">&quot;教室上课&quot;</span>, <span class="function">(<span class="params">name, course</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">`学生<span class="subst">$&#123;name&#125;</span>去教室上<span class="subst">$&#123;course&#125;</span>课`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> id = EB.$on(<span class="string">&quot;户外上课&quot;</span>, <span class="function">(<span class="params">name, course</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">`学生<span class="subst">$&#123;name&#125;</span>去户外上<span class="subst">$&#123;course&#125;</span>课`</span>);</span><br><span class="line">&#125;)</span><br><span class="line">EB.$once(<span class="string">&quot;献血&quot;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">`学生<span class="subst">$&#123;name&#125;</span>去献血`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学校中事件发生</span></span><br><span class="line">EB.$emit(<span class="string">&#x27;上课&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>); <span class="comment">// 学生张三到上课地点</span></span><br><span class="line">EB.$emit(<span class="string">&#x27;上课&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>); <span class="comment">// 学生李四到上课地点</span></span><br><span class="line">EB.$emit(<span class="string">&#x27;教室上课&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;编程&#x27;</span>); <span class="comment">// 学生张三去教室上编程课</span></span><br><span class="line">EB.$emit(<span class="string">&#x27;户外上课&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;田径&#x27;</span>); <span class="comment">// 学生张三去户外上田径课</span></span><br><span class="line">EB.$off(<span class="string">&#x27;户外上课&#x27;</span>, id);</span><br><span class="line">EB.$emit(<span class="string">&#x27;户外上课&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;足球&#x27;</span>);</span><br><span class="line">EB.$emit(<span class="string">&#x27;献血&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>); <span class="comment">// 学生王五去献血</span></span><br><span class="line">EB.$emit(<span class="string">&#x27;献血&#x27;</span>, <span class="string">&#x27;马六&#x27;</span>);</span><br><span class="line"><span class="comment">// console.log(EB)</span></span><br><span class="line">EB.$clear()</span><br><span class="line"><span class="comment">// console.log(EB)</span></span><br></pre></td></tr></table></figure><p>从上面的代码可以大概了解到，事件总线应该具备五种方法，对应着下一部分的API设计</p><h2 id="API设计"><a href="#API设计" class="headerlink" title="API设计"></a>API设计</h2><ul><li>发布消息（emit）<ul><li>能够表示消息类型，可能还携带参数</li></ul></li><li>订阅消息（on）<ul><li>能够知道具体的消息类型，并执行回调，回调的参数就是发布消息时携带的参数</li></ul></li><li>取消订阅（off）<ul><li>能够知道具体的消息类型，取消订阅该消息类型，即回调函数不再执行</li></ul></li><li>仅订阅一次消息（once）<ul><li>能够知道具体的消息类型，执行一次回调后，再次接收相同消息，不再执行回调</li></ul></li><li>清除某个或所有事件（clear）<ul><li>如果指定了某个消息类型，则清除该消息类型的回调，否则全部清除</li></ul></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h4 id="基础实现（仅包含订阅和发布）"><a href="#基础实现（仅包含订阅和发布）" class="headerlink" title="基础实现（仅包含订阅和发布）"></a>基础实现（仅包含订阅和发布）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventBus</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.eventObj = &#123;&#125;; <span class="comment">// interface EveneObj &#123; [name: string]: Function[] &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $on(name, callback) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.eventObj[name]) &#123;</span><br><span class="line">           <span class="comment">// 如果尚未注册，用数组来收集回调函数</span></span><br><span class="line">            <span class="built_in">this</span>.eventObj[name] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.eventObj[name].push(callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $emit(name) &#123;</span><br><span class="line">        <span class="keyword">const</span> eventList = <span class="built_in">this</span>.eventObj[name];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> callback <span class="keyword">of</span> eventList) &#123;</span><br><span class="line">           <span class="comment">// 执行回调</span></span><br><span class="line">            callback(<span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> EB = <span class="keyword">new</span> EventBus();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅事件</span></span><br><span class="line">EB.$on(<span class="string">&#x27;上课&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">&quot;该上课了&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">EB.$on(<span class="string">&quot;上课&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">&quot;做笔记&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">EB.$on(<span class="string">&quot;下课&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">&quot;下课啦！&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布事件</span></span><br><span class="line">EB.$emit(<span class="string">&#x27;上课&#x27;</span>);</span><br><span class="line">EB.$emit(<span class="string">&#x27;下课&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="如何在发布消息时携带参数"><a href="#如何在发布消息时携带参数" class="headerlink" title="如何在发布消息时携带参数"></a>如何在发布消息时携带参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$on(name, callback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.eventObj[name]) &#123;</span><br><span class="line">       <span class="built_in">this</span>.eventObj[name] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.eventObj[name].push(callback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$emit(name, ...args) &#123;</span><br><span class="line">    <span class="keyword">const</span> eventList = <span class="built_in">this</span>.eventObj[name];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> callback <span class="keyword">of</span> eventList) &#123;</span><br><span class="line">      callback(...args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一次订阅"><a href="#一次订阅" class="headerlink" title="一次订阅"></a>一次订阅</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加新的数据结构</span></span><br><span class="line"><span class="built_in">this</span>.onceObj = &#123;&#125;; <span class="comment">// interface OnceEventObj &#123; [key: string]: Function[] &#125;</span></span><br><span class="line"></span><br><span class="line">$once(eventName, callback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.onceObj[eventName]) &#123;</span><br><span class="line">      <span class="built_in">this</span>.onceObj[eventName] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.onceObj[eventName].push(callback)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="取消订阅"><a href="#取消订阅" class="headerlink" title="取消订阅"></a>取消订阅</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里引入一个id参数，标识每个回调，同时修改eventObj的结构</span></span><br><span class="line"><span class="comment">// interface EventObj &#123; [key: string]: &#123; [id: number]: Function &#125; &#125;</span></span><br><span class="line">$off(eventName, id) &#123;</span><br><span class="line">    <span class="keyword">if</span> (id) &#123;</span><br><span class="line">        <span class="comment">// 传入了id则删除对应的回调</span></span><br><span class="line">        <span class="keyword">delete</span> <span class="built_in">this</span>.eventObj[eventName][id];</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Object</span>.keys(<span class="built_in">this</span>.eventObj[eventName]).length) &#123;</span><br><span class="line">          <span class="keyword">delete</span> <span class="built_in">this</span>.eventObj[eventName];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 否则删除整个事件的所有回调</span></span><br><span class="line">        <span class="keyword">delete</span> <span class="built_in">this</span>.eventObj[eventName];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="清除事件"><a href="#清除事件" class="headerlink" title="清除事件"></a>清除事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$clear(eventName: string = <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 未提供事件名称，默认清除所有事件</span></span><br><span class="line">    <span class="keyword">if</span> (!eventName) &#123;</span><br><span class="line">        <span class="built_in">this</span>.eventObj = &#123;&#125;;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 清除指定事件</span></span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">this</span>.eventObj[eventName];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="终版（TS版本）"><a href="#终版（TS版本）" class="headerlink" title="终版（TS版本）"></a>终版（TS版本）</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> EventObj &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: &#123; [id: <span class="built_in">number</span>]: <span class="built_in">Function</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> OnceEventObj &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: <span class="built_in">Function</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventBus</span> </span>&#123;</span><br><span class="line">    <span class="attr">eventObj</span>: EventObj</span><br><span class="line">    <span class="comment">/** 每个函数的ID */</span></span><br><span class="line">    <span class="attr">callbcakId</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">onceObj</span>: OnceEventObj</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.eventObj = &#123;&#125;;</span><br><span class="line">        <span class="built_in">this</span>.callbcakId = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.onceObj = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $on(eventName: <span class="built_in">string</span>, <span class="attr">callback</span>: <span class="built_in">Function</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.eventObj[eventName]) &#123;</span><br><span class="line">            <span class="built_in">this</span>.eventObj[eventName] = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> id = <span class="built_in">this</span>.callbcakId++;</span><br><span class="line">        <span class="built_in">this</span>.eventObj[eventName][id] = callback;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $emit(eventName: <span class="built_in">string</span>, ...args: <span class="built_in">any</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> eventList = <span class="built_in">this</span>.eventObj[eventName];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> id <span class="keyword">in</span> eventList) &#123;</span><br><span class="line">            <span class="keyword">typeof</span> eventList[id] === <span class="string">&#x27;function&#x27;</span> &amp;&amp; eventList[id](...args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> onceEvent = <span class="built_in">this</span>.onceObj[eventName];</span><br><span class="line">        <span class="keyword">if</span> (onceEvent) &#123;</span><br><span class="line">            onceEvent.forEach(<span class="function">(<span class="params">callback</span>) =&gt;</span> callback(...args));</span><br><span class="line">            <span class="keyword">delete</span> <span class="built_in">this</span>.onceObj[eventName];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $off(eventName: <span class="built_in">string</span>, <span class="attr">id</span>: <span class="built_in">number</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (id) &#123;</span><br><span class="line">            <span class="comment">// 传入了id则删除对应的回调</span></span><br><span class="line">            <span class="keyword">delete</span> <span class="built_in">this</span>.eventObj[eventName][id];</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">Object</span>.keys(<span class="built_in">this</span>.eventObj[eventName]).length) &#123;</span><br><span class="line">                <span class="keyword">delete</span> <span class="built_in">this</span>.eventObj[eventName];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 否则删除整个事件的所有回调</span></span><br><span class="line">            <span class="keyword">delete</span> <span class="built_in">this</span>.eventObj[eventName];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $once(eventName: <span class="built_in">string</span>, <span class="attr">callback</span>: <span class="built_in">Function</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.onceObj[eventName]) &#123;</span><br><span class="line">            <span class="built_in">this</span>.onceObj[eventName] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.onceObj[eventName].push(callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $clear(eventName: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 未提供事件名称，默认清除所有事件</span></span><br><span class="line">        <span class="keyword">if</span> (!eventName) &#123;</span><br><span class="line">            <span class="built_in">this</span>.eventObj = &#123;&#125;;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 清除指定事件</span></span><br><span class="line">        <span class="keyword">delete</span> <span class="built_in">this</span>.eventObj[eventName];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> EB = <span class="keyword">new</span> EventBus();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅事件</span></span><br><span class="line">EB.$on(<span class="string">&#x27;上课&#x27;</span>, <span class="function">(<span class="params">name: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">`学生<span class="subst">$&#123;name&#125;</span>到上课地点`</span>);</span><br><span class="line">&#125;)</span><br><span class="line">EB.$on(<span class="string">&quot;教室上课&quot;</span>, <span class="function">(<span class="params">name: <span class="built_in">string</span>, course: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">`学生<span class="subst">$&#123;name&#125;</span>去教室上<span class="subst">$&#123;course&#125;</span>课`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> id = EB.$on(<span class="string">&quot;户外上课&quot;</span>, <span class="function">(<span class="params">name: <span class="built_in">string</span>, course: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">`学生<span class="subst">$&#123;name&#125;</span>去户外上<span class="subst">$&#123;course&#125;</span>课`</span>);</span><br><span class="line">&#125;)</span><br><span class="line">EB.$once(<span class="string">&quot;献血&quot;</span>, <span class="function">(<span class="params">name: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">`学生<span class="subst">$&#123;name&#125;</span>去献血`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布事件</span></span><br><span class="line">EB.$emit(<span class="string">&#x27;上课&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line">EB.$emit(<span class="string">&#x27;上课&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line">EB.$emit(<span class="string">&#x27;教室上课&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;编程&#x27;</span>);</span><br><span class="line">EB.$emit(<span class="string">&#x27;户外上课&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;田径&#x27;</span>);</span><br><span class="line">EB.$off(<span class="string">&#x27;户外上课&#x27;</span>, id);</span><br><span class="line">EB.$emit(<span class="string">&#x27;户外上课&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;足球&#x27;</span>);</span><br><span class="line">EB.$emit(<span class="string">&#x27;献血&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>);</span><br><span class="line">EB.$emit(<span class="string">&#x27;献血&#x27;</span>, <span class="string">&#x27;马六&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(EB)</span><br><span class="line">EB.$clear()</span><br><span class="line"><span class="built_in">console</span>.log(EB)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="为什么不被推荐使用"><a href="#为什么不被推荐使用" class="headerlink" title="为什么不被推荐使用"></a>为什么不被推荐使用</h2><p>事件总线使用起来非常简单，但是！</p><ul><li>随着事件的推移，注册的事件可能越来越多，如果没有及时清理相关事件，整个对象占用的内存会越来越大</li><li>当逻辑变得复杂时大量使用事件总线，会让数据流混乱，难以预测，这样在调试代码时难以定位或修改</li></ul><h2 id="替代方式"><a href="#替代方式" class="headerlink" title="替代方式"></a>替代方式</h2><ul><li>状态提升<ul><li>有时我们需要在兄弟组件间传递数据，这种情况可以把共享<em>状态提升</em>到最近的共同父组件中去</li></ul></li><li>使用状态管理工具<ul><li>主流前端开发框架都有相应的状态管理方案，比如redux、mobx、Vuex</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>替代chrome中的Event.path</title>
    <link href="http://example.com/2022/12/22/%E6%9B%BF%E4%BB%A3chrome%E4%B8%AD%E7%9A%84Event.path/"/>
    <id>http://example.com/2022/12/22/%E6%9B%BF%E4%BB%A3chrome%E4%B8%AD%E7%9A%84Event.path/</id>
    <published>2022-12-22T09:39:41.000Z</published>
    <updated>2023-07-19T01:25:51.882Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="Event-path和Event-composedPath"><a href="#Event-path和Event-composedPath" class="headerlink" title="Event.path和Event.composedPath"></a>Event.path和Event.composedPath</h2><p>在开发过程时，有时需要获取事件冒泡/捕获过程的所有元素，在不同的浏览器中，获取的方法可能不一样</p><p>chrome作为常用的浏览器，可以通过<code>event.path</code>属性来获取，示例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>event.path测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>组织/部门<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;department&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;dev&quot;</span>&gt;</span>研发组<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;administrative&quot;</span>&gt;</span>行政组<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>公关组<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> target = <span class="built_in">document</span>.getElementById(<span class="string">&quot;dev&quot;</span>)</span></span><br><span class="line"><span class="javascript">    target.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> path = evt.path;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;研发组点击事件的path:&#x27;</span>, path)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Chrome</code>(版本：108.0.5359.124)操作结果：</p><p><img src="https://raw.githubusercontent.com/HJY-xh/pictures/master/pictures/202212221729070.png"></p><p><code>Firefox</code>(版本：108.0.1)操作结果：</p><p><img src="https://raw.githubusercontent.com/HJY-xh/pictures/master/pictures/202212221730228.png"></p><p>该属性返回事件路径，但并不是一个标准属性，不过在 <code>chrome</code> 浏览器中存在，而<code>Firefox</code>不存在</p><p>当 <code>Event.path</code> 取不到值时就取 <code>Event.composedPath</code></p><p><code>Event.composedPath</code>的兼容性如下：</p><p><img src="https://raw.githubusercontent.com/HJY-xh/pictures/master/pictures/202212221734027.png"></p><p>在2021年12月份，<code>chrome</code>官方团队发布<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1277431">issue</a>，将要移除<code>event.path</code></p><h2 id="现有项目如何处理"><a href="#现有项目如何处理" class="headerlink" title="现有项目如何处理"></a>现有项目如何处理</h2><p>现有项目和依赖的第三方库/包都有可能受到影响，在这种情况下可以添加polyfill作为成本较小的解决方案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!Event.prototype.path) &#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Event.prototype, <span class="string">&quot;path&quot;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.composedPath();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>如何支持IE？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">e, d, w</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!e.composedPath) &#123;</span><br><span class="line">    e.composedPath = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.path) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.path;</span><br><span class="line">      &#125; </span><br><span class="line">    <span class="keyword">var</span> target = <span class="built_in">this</span>.target;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.path = [];</span><br><span class="line">    <span class="keyword">while</span> (target.parentNode !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.path.push(target);</span><br><span class="line">      target = target.parentNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.path.push(d, w);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.path;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(Event.prototype, <span class="built_in">document</span>, <span class="built_in">window</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Event-path和Event-composedPath&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="Chrome" scheme="http://example.com/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>canvas渲染上下文设置填充样式，在安卓机型上不生效</title>
    <link href="http://example.com/2022/11/03/canvas%E6%B8%B2%E6%9F%93%E4%B8%8A%E4%B8%8B%E6%96%87%E8%AE%BE%E7%BD%AE%E5%A1%AB%E5%85%85%E6%A0%B7%E5%BC%8F%EF%BC%8C%E5%9C%A8%E5%AE%89%E5%8D%93%E6%9C%BA%E5%9E%8B%E4%B8%8A%E4%B8%8D%E7%94%9F%E6%95%88/"/>
    <id>http://example.com/2022/11/03/canvas%E6%B8%B2%E6%9F%93%E4%B8%8A%E4%B8%8B%E6%96%87%E8%AE%BE%E7%BD%AE%E5%A1%AB%E5%85%85%E6%A0%B7%E5%BC%8F%EF%BC%8C%E5%9C%A8%E5%AE%89%E5%8D%93%E6%9C%BA%E5%9E%8B%E4%B8%8A%E4%B8%8D%E7%94%9F%E6%95%88/</id>
    <published>2022-11-03T08:50:03.000Z</published>
    <updated>2022-11-03T08:58:04.691Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="探究起因"><a href="#探究起因" class="headerlink" title="探究起因"></a>探究起因</h2><p>在阅读一些框架源码（比方说Vue)时发现，开发者们使用<code>Object.create(null)</code>来初始化一个新对象，而我们一般在非面向工具链/基建开发时，惯常使用字面量，那么它们有什么区别呢？</p><p><strong>省流：当设置透明度时，尽量使用<code>ctx.fillStyle = &#39;rgb(174, 238, 238, 0.5)&#39;;</code>的形式，而非<code>ctx.fillStyle = &#39;#AEEEEE80&#39;;</code>后者在安卓真机（华为自带浏览器下必现）下无效</strong></p><p>今天客户反馈在安卓机型下打开我们的签署页面，水印的颜色和透明度不管如何设置，都不生效，而IOS的表现正常</p><p>关键代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">ctx.fillStyle = colorRgb(color, transparency);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取颜色的16进制 （颜色+透明度）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>color 颜色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>transparency 透明度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> convertColor = <span class="function">(<span class="params">color: string, transparency: number</span>) =&gt;</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">const</span> getPureColor = <span class="function">(<span class="params">color: string</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> plainColor = color?.substring(<span class="number">1</span>); <span class="comment">// 去掉#</span></span><br><span class="line">        <span class="keyword">const</span> isColorShort = plainColor?.length === <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">return</span> isColorShort ? plainColor.split(<span class="string">&#x27;&#x27;</span>).map(<span class="function"><span class="params">v</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;v&#125;</span><span class="subst">$&#123;v&#125;</span>`</span>).join(<span class="string">&#x27;&#x27;</span>) : plainColor;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">const</span> getAlpha = <span class="function">(<span class="params">transparency: number</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> alpha = <span class="built_in">parseInt</span>(<span class="built_in">String</span>(<span class="number">256</span> * transparency), <span class="number">10</span>).toString(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">return</span> alpha.length &gt; <span class="number">1</span> ? alpha : <span class="string">`0<span class="subst">$&#123;alpha&#125;</span>`</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="string">`#<span class="subst">$&#123;getPureColor(color)&#125;</span><span class="subst">$&#123;getAlpha(transparency)&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以 颜色：#AEEEEE，透明度：0.5 为例，转化后得到结果#AEEEEE80，将结果赋值给ctx.fillStyle，在PC端使用chrome浏览器调试表现正常，但是在安卓真机上无效</p><p>左图为透明度为1，右图透明度为0.2，在华为自带浏览器下测试结果对比图如下：</p><p><img src="https://raw.githubusercontent.com/HJY-xh/pictures/master/pictures/202211031656919.png"></p><p><img src="https://raw.githubusercontent.com/HJY-xh/pictures/master/pictures/202211031656710.png"></p><p>完整demo如下，可以用node起一个服务，在手机上打开：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>canvas颜色和透明度不生效<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vconsole@latest/dist/vconsole.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">new</span> <span class="built_in">window</span>.VConsole();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>);</span></span><br><span class="line"><span class="javascript">            canvas.width = <span class="number">1000</span>;</span></span><br><span class="line"><span class="javascript">            canvas.height = <span class="number">1000</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="javascript">            ctx.font = <span class="string">&quot;20px Microsoft YaHei&quot;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// ctx.fillStyle = convertColor(&#x27;#AEEEEE&#x27;, 0.2);</span></span></span><br><span class="line"><span class="javascript">            ctx.fillStyle = convertColor(<span class="string">&#x27;#AEEEEE&#x27;</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 绘制文字水印</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span></span><br><span class="line"><span class="javascript">                    ctx.fillText(<span class="string">&quot;Hello world&quot;</span>, <span class="number">150</span> * (i), <span class="number">50</span> * (j + <span class="number">1</span>));</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         * 获取颜色的16进制 （颜色+透明度）</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         *</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         * <span class="doctag">@param </span>color 颜色</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         * <span class="doctag">@param </span>transparency 透明度</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         * <span class="doctag">@returns</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript">         */</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> convertColor = <span class="function">(<span class="params">color, transparency</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> getPureColor = <span class="function">(<span class="params">color</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> plainColor = color?.substring(<span class="number">1</span>); <span class="comment">// 去掉#</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> isColorShort = plainColor?.length === <span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> isColorShort ? plainColor.split(<span class="string">&#x27;&#x27;</span>).map(<span class="function"><span class="params">v</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;v&#125;</span><span class="subst">$&#123;v&#125;</span>`</span>).join(<span class="string">&#x27;&#x27;</span>) : plainColor;</span></span><br><span class="line"><span class="javascript">            &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> getAlpha = <span class="function">(<span class="params">transparency</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> alpha = <span class="built_in">parseInt</span>(<span class="built_in">String</span>(<span class="number">256</span> * transparency), <span class="number">10</span>).toString(<span class="number">16</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> alpha.length &gt; <span class="number">1</span> ? alpha : <span class="string">`0<span class="subst">$&#123;alpha&#125;</span>`</span>;</span></span><br><span class="line"><span class="javascript">            &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">`#<span class="subst">$&#123;getPureColor(color)&#125;</span><span class="subst">$&#123;getAlpha(transparency)&#125;</span>`</span>;</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;探究起因&quot;&gt;&lt;a href=&quot;#探究起因&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>探究Safari对于canvas的限制</title>
    <link href="http://example.com/2022/10/25/%E6%8E%A2%E7%A9%B6Safari%E5%AF%B9%E4%BA%8Ecanvas%E7%9A%84%E9%99%90%E5%88%B6/"/>
    <id>http://example.com/2022/10/25/%E6%8E%A2%E7%A9%B6Safari%E5%AF%B9%E4%BA%8Ecanvas%E7%9A%84%E9%99%90%E5%88%B6/</id>
    <published>2022-10-25T03:32:52.000Z</published>
    <updated>2022-10-25T06:29:01.682Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="探究起因"><a href="#探究起因" class="headerlink" title="探究起因"></a>探究起因</h2><p>之前使用<code>canvas</code>做了一个绘制水印的功能，可以简单理解成进入A页面后，从接口获取绘制水印的配置，然后在A页面的某个区域使用<code>canvas</code>加盖一层水印</p><p>开发和测试都在chrome浏览器上进行，期间均表现正常，直到交付给客户几个月后接到反馈，其APP内嵌我们开发的H5页面，先后出现了以下问题：</p><ul><li>Android机型正常进入页面，偶尔水印不加载</li><li>在IOS下打开页面后无法正常加载，控制台有报错</li><li>在华为鸿蒙系统下APP直接闪退</li></ul><p>嚯，问题还挺多，一个比一个严重- -！那接下来看看，是什么问题导致以上现象</p><p><strong>下文使用我另外写的一个demo做演示</strong></p><h2 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h2><h4 id="第一个问题相对来说比较简单，这里简单说说"><a href="#第一个问题相对来说比较简单，这里简单说说" class="headerlink" title="第一个问题相对来说比较简单，这里简单说说"></a>第一个问题相对来说比较简单，这里简单说说</h4><p>使用Android机型进行测试，确实是偶现不加载的情况，经过反复调试，发现在弱网情况下，没有请求接口，这里调整了请求的顺序就解决了</p><h4 id="第二个问题"><a href="#第二个问题" class="headerlink" title="第二个问题"></a>第二个问题</h4><p>一开始在chrome和Firefox下均未复现，后来发现仅在iPhone真机Safari下才能复现，报错如下：</p><p><img src="https://raw.githubusercontent.com/HJY-xh/pictures/master/pictures/202210251104583.png"></p><p>难道ctx是null吗，结合部分代码调试后查看确实没有获取到渲染上下文</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">canvas.width = <span class="number">10000</span>;</span><br><span class="line">canvas.height = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">const</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">ctx.font = <span class="string">&quot;20px Microsoft YaHei&quot;</span>;</span><br></pre></td></tr></table></figure><p>这时想起来Safari对于canvas的使用有一些限制（或者说是优化），印象中该浏览器对于canvas的数量有一定限制，emmm，我的代码中只有一个canvas，应该和这个限制没有关系</p><p>然后我开始搜索Safari对于使用canvas有什么限制/webkit内核对于canvas的限制，好的，没找到什么蛛丝马迹。于是开始面向google编程，翻一翻有没有人遇到过相似的问题</p><p>在一篇文章中有人提到 Safari对于画布大小有限制，于是我修改宽高，均缩小10倍，也就是渲染的区域缩小了100倍，刷新页面后正常加载了！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">canvas.width = <span class="number">1000</span>;</span><br><span class="line">canvas.height = <span class="number">1000</span>;</span><br></pre></td></tr></table></figure><p>问题解决了是针不戳啊，那具体的尺寸是多少等解决完所有问题再研究下</p><h4 id="第三个问题"><a href="#第三个问题" class="headerlink" title="第三个问题"></a>第三个问题</h4><p>APP闪退，刚开始初步判断可能是客户环境webview做了某些处理，和我们H5页面没有什么关系，于是请教APP开发大佬，大佬一顿排查后得出结论：在华为鸿蒙系统下，H5页面渲染太久了，导致闪退</p><p>好家伙，那这个情况还是因为受到了画布大小影响？！</p><p>于是让测试同学在响应系统上通过APP打开H5页面，确实是没有再发生闪退…</p><p><img src="https://raw.githubusercontent.com/HJY-xh/pictures/master/pictures/202210251153265.png"></p><p>那至此bug全部解决</p><h2 id="探究Safari对于canvas的限制"><a href="#探究Safari对于canvas的限制" class="headerlink" title="探究Safari对于canvas的限制"></a>探究Safari对于canvas的限制</h2><p>已知：Safari采用webkit内核</p><p>解：去github上clone一份源码瞅瞅</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/WebKit/WebKit.git</span><br></pre></td></tr></table></figure><p>（下面贴的源码均在<code>Source/WebCore/html/HTMLCanvasElement.cpp</code>文件中，可以直接翻阅，clone下来太久啦）</p><p>Safari 在实现<code>canvas</code>时对内存进行了限制，在不同设备上允许使用的内存不同，具体根据设备 RAM 的大小计算，一旦超出限制，使用 getContext(‘2d’) 将会返回 null</p><p>C++源码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">CanvasRenderingContext2D* <span class="title">HTMLCanvasElement::createContext2d</span><span class="params">(<span class="keyword">const</span> String&amp; type, CanvasRenderingContext2DSettings&amp;&amp; settings)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">ASSERT_UNUSED</span>(HTMLCanvasElement::<span class="built_in">is2dType</span>(type), type);</span><br><span class="line">    <span class="built_in">ASSERT</span>(!m_context);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure we don&#x27;t use more pixel memory than the system can support.</span></span><br><span class="line">    <span class="keyword">size_t</span> requestedPixelMemory = <span class="number">4</span> * <span class="built_in">width</span>() * <span class="built_in">height</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">activePixelMemory</span>() + requestedPixelMemory &gt; <span class="built_in">maxActivePixelMemory</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> message = <span class="built_in">makeString</span>(<span class="string">&quot;Total canvas memory use exceeds the maximum limit (&quot;</span>, <span class="built_in">maxActivePixelMemory</span>() / <span class="number">1024</span> / <span class="number">1024</span>, <span class="string">&quot; MB).&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>().<span class="built_in">addConsoleMessage</span>(MessageSource::JS, MessageLevel::Warning, message);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_context = CanvasRenderingContext2D::<span class="built_in">create</span>(*<span class="keyword">this</span>, <span class="built_in">WTFMove</span>(settings), <span class="built_in">document</span>().<span class="built_in">inQuirksMode</span>());</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE(IOSURFACE_CANVAS_BACKING_STORE)</span></span><br><span class="line">    <span class="comment">// Need to make sure a RenderLayer and compositing layer get created for the Canvas.</span></span><br><span class="line">    <span class="built_in">invalidateStyleAndLayerComposition</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;CanvasRenderingContext2D*&gt;(m_context.<span class="built_in">get</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 <code>canvas</code> 的内存占用空间为 <code>4 * width * height</code>，这里的4指每个像素的RGBA</p><p>允许使用的最大内存空间由 <code>maxActivePixelMemory</code> 这个函数计算，这个函数计算规则如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">HTMLCanvasElement::maxActivePixelMemory</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (maxActivePixelMemoryForTesting)</span><br><span class="line">        <span class="keyword">return</span> *maxActivePixelMemoryForTesting;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">size_t</span> maxPixelMemory;</span><br><span class="line">    <span class="keyword">static</span> std::once_flag onceFlag;</span><br><span class="line">    std::<span class="built_in">call_once</span>(onceFlag, [] &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> PLATFORM(IOS_FAMILY)</span></span><br><span class="line">        maxPixelMemory = <span class="built_in">ramSize</span>() / <span class="number">4</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        maxPixelMemory = std::<span class="built_in">max</span>(<span class="built_in">ramSize</span>() / <span class="number">4</span>, <span class="number">2151</span> * MB);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxPixelMemory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再查找源码对于画布大小的限制：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">size_t</span> <span class="title">maxCanvasArea</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (maxCanvasAreaForTesting)</span><br><span class="line">        <span class="keyword">return</span> *maxCanvasAreaForTesting;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Firefox limits width/height to 32767 pixels, but slows down dramatically before it</span></span><br><span class="line">    <span class="comment">// reaches that limit. We limit by area instead, giving us larger maximum dimensions,</span></span><br><span class="line">    <span class="comment">// in exchange for a smaller maximum canvas size. The maximum canvas size is in device pixels.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> PLATFORM(IOS_FAMILY)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">4096</span> * <span class="number">4096</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">16384</span> * <span class="number">16384</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过实际测试，在iPhone的Safari中，<code>canvas</code>的最大可用宽高确实是4096</p><p>具体可以看参考文章中的<a href="https://blog.csdn.net/lefex/article/details/121072900">Safari难道是下一个IE？兼容性这么“差”</a></p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>另外在chrome、Firefox中，过大的宽高（100000），也无法正常展示，如下所示：</p><p><img src="https://raw.githubusercontent.com/HJY-xh/pictures/master/pictures/202210251358465.png"></p><p><img src="https://raw.githubusercontent.com/HJY-xh/pictures/master/pictures/202210251400897.png"></p><p>没有探讨释放<code>canvas</code>占用的内存，大家有兴趣可以尝试一下</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>MDN</p><p><a href="https://stackoverflow.com/questions/40482586/getcontext2d-returns-null-in-safari-10">stackoverflow</a></p><p><a href="https://blog.csdn.net/lefex/article/details/121072900">Safari难道是下一个IE？兼容性这么“差”</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;探究起因&quot;&gt;&lt;a href=&quot;#探究起因&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>深入探究Object.create（尚未完成）</title>
    <link href="http://example.com/2022/10/17/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%A9%B6Object.create/"/>
    <id>http://example.com/2022/10/17/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%A9%B6Object.create/</id>
    <published>2022-10-17T13:12:03.000Z</published>
    <updated>2022-10-25T06:32:23.764Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="探究起因"><a href="#探究起因" class="headerlink" title="探究起因"></a>探究起因</h2><p>在阅读一些框架源码（比方说Vue)时发现，开发者们使用<code>Object.create(null)</code>来初始化一个新对象，而我们一般在非面向工具链/基建开发时，惯常使用字面量，那么它们有什么区别呢？</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">MDN</a></p><p><a href="https://stackoverflow.com/questions/15518328/is-creating-js-object-with-object-createnull-the-same-as">stackoverflow</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;探究起因&quot;&gt;&lt;a href=&quot;#探究起因&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript中extends用法小结</title>
    <link href="http://example.com/2022/08/22/TypeScript%E4%B8%ADextends%E7%94%A8%E6%B3%95%E5%B0%8F%E7%BB%93/"/>
    <id>http://example.com/2022/08/22/TypeScript%E4%B8%ADextends%E7%94%A8%E6%B3%95%E5%B0%8F%E7%BB%93/</id>
    <published>2022-08-22T14:12:31.000Z</published>
    <updated>2022-08-31T09:17:36.455Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><p><code>extends</code>关键字在TS中有多种用法，单独使用时，常见有以下几种情况</p><ul><li>继承/拓展</li><li>约束</li><li>条件判断</li></ul><h2 id="继承-扩展"><a href="#继承-扩展" class="headerlink" title="继承/扩展"></a>继承/扩展</h2><h4 id="单个-多个接口"><a href="#单个-多个接口" class="headerlink" title="单个/多个接口"></a>单个/多个接口</h4><p>这种用法和类的继承相似，看个🌰</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dog继承Animal并扩展一个run方法</span></span><br><span class="line"><span class="keyword">interface</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="attr">run</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog: Dog = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;狗子&#x27;</span>,</span><br><span class="line">    <span class="attr">run</span>: <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也支持多重继承</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Blackdog <span class="keyword">extends</span> Animal, Dog &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扩展类的接口"><a href="#扩展类的接口" class="headerlink" title="扩展类的接口"></a>扩展类的接口</h4><p>除了上面的常见用法，接口还可以继承类的私有成员和受保护成员，而不仅仅是公共成员</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> state: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Runnable <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    run(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> <span class="title">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> <span class="title">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Error: 缺少属性 state</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monkey</span> <span class="title">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>一个接口可以继承/扩展一个或多个现有接口</li><li>一个接口也可以继承/扩展一个类。如果该类包含私有或受保护成员，则该接口只能由该类或其子类实现</li></ul><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>此处说的约束，一般指泛型约束，即对泛型的类型进行约束控制</p><p>在编写方法的时候，可能会需要对参数的类型做一些限制，比方说入参有一个<code>length</code>属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有约束</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Error: 类型“T”上不存在属性“length”</span></span><br><span class="line">    <span class="keyword">return</span> arg.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行约束</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>&lt;<span class="title">T</span> <span class="title">extends</span> </span>&#123;length: <span class="built_in">number</span>&#125;&gt;(arg: T): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arg.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>和三目表达式类似，看看官网的示例和说明</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SomeType <span class="keyword">extends</span> OtherType ? TrueType : FalseType;</span><br></pre></td></tr></table></figure><blockquote><p>When the type on the left of the <code>extends</code> is assignable to the one on the right, then you’ll get the type in the first branch (the “true” branch); otherwise you’ll get the type in the latter branch (the “false” branch).</p></blockquote><p><strong>如果extends前面的类型能够赋值给extends后面的类型，那么表达式判断为真，否则为假</strong></p><h4 id="常规使用"><a href="#常规使用" class="headerlink" title="常规使用"></a>常规使用</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A1 &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> A2 &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// A的类型为string</span></span><br><span class="line"><span class="keyword">type</span> A = A2 <span class="keyword">extends</span> A1 ? <span class="built_in">string</span> : <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str: A = <span class="string">&#x27;this is string&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>A1，A2两个接口，满足A2的接口一定可以满足A1，所以条件为真，A的类型取string</p><h4 id="结合泛型使用"><a href="#结合泛型使用" class="headerlink" title="结合泛型使用"></a>结合泛型使用</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A1 = <span class="string">&#x27;x&#x27;</span> <span class="keyword">extends</span> <span class="string">&#x27;x&#x27;</span> ? <span class="built_in">string</span> : <span class="built_in">number</span>; <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> A2 = <span class="string">&#x27;x&#x27;</span> | <span class="string">&#x27;y&#x27;</span> <span class="keyword">extends</span> <span class="string">&#x27;x&#x27;</span> ? <span class="built_in">string</span> : <span class="built_in">number</span>; <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> P&lt;T&gt; = T <span class="keyword">extends</span> <span class="string">&#x27;x&#x27;</span> ? <span class="built_in">string</span> : <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">type</span> A3 = P&lt;<span class="string">&#x27;x&#x27;</span> | <span class="string">&#x27;y&#x27;</span>&gt; <span class="comment">// ?</span></span><br></pre></td></tr></table></figure><p>A1、A2的结果也就是常规的用法，很容易得出结果，但是A3结合了泛型，这里有一个<code>Distributive Conditional Types</code>的概念</p><blockquote><p>When conditional types act on a generic type, they become <em>distributive</em> when given a union type</p></blockquote><p><em>如果extends前面的参数是一个泛型类型，当传入该参数的是联合类型，则使用分配律计算最终的结果。分配律是指，将联合类型的联合项拆成单项，分别代入条件类型，然后将每个单项代入得到的结果再联合起来，得到最终的判断结果。</em></p><p>以上面的A3为例，进行推导</p><p>P<T>中T是一个泛型参数。在A3的定义中，给T传入的是’x’和’y’的联合类型’x’ | ‘y’，满足分配律，于是’x’和’y’被拆开，分别代入P<T></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">P&lt;<span class="string">&#x27;x&#x27;</span> | <span class="string">&#x27;y&#x27;</span>&gt; =&gt; P&lt;<span class="string">&#x27;x&#x27;</span>&gt; | P&lt;<span class="string">&#x27;y&#x27;</span>&gt;</span><br><span class="line"><span class="comment">// &#x27;x&#x27;代入得到</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span> <span class="keyword">extends</span> <span class="string">&#x27;x&#x27;</span> ? <span class="built_in">string</span> : <span class="function"><span class="params">number</span> =&gt;</span> <span class="built_in">string</span></span><br><span class="line"><span class="comment">// &#x27;y&#x27;代入得到</span></span><br><span class="line"><span class="string">&#x27;y&#x27;</span> <span class="keyword">extends</span> <span class="string">&#x27;x&#x27;</span> ? <span class="built_in">string</span> : <span class="function"><span class="params">number</span> =&gt;</span> <span class="built_in">number</span></span><br></pre></td></tr></table></figure><p>然后将每一项代入得到的结果联合起来，得到string | number</p><p>满足两个要点即可适用分配律：第一，参数是泛型类型，第二，代入参数的是联合类型</p><h4 id="特殊的never"><a href="#特殊的never" class="headerlink" title="特殊的never"></a>特殊的never</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// never是所有类型的子类型</span></span><br><span class="line"><span class="keyword">type</span> A1 = <span class="built_in">never</span> <span class="keyword">extends</span> <span class="string">&#x27;x&#x27;</span> ? <span class="built_in">string</span> : <span class="built_in">number</span>; <span class="comment">// string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> P&lt;T&gt; = T <span class="keyword">extends</span> <span class="string">&#x27;x&#x27;</span> ? <span class="built_in">string</span> : <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">type</span> A2 = P&lt;<span class="built_in">never</span>&gt; <span class="comment">// never</span></span><br></pre></td></tr></table></figure><p><strong>never被认为是空的联合类型</strong>，也就是说，没有联合项的联合类型，所以还是满足上面的分配律，然而因为没有联合项可以分配，所以<code>P&lt;T&gt;</code>的表达式其实根本就没有执行，所以A2的定义也就类似于永远没有返回的函数一样，是never类型的</p><h4 id="防止条件判断中的分配"><a href="#防止条件判断中的分配" class="headerlink" title="防止条件判断中的分配"></a>防止条件判断中的分配</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> P&lt;T&gt; = [T] <span class="keyword">extends</span> [<span class="string">&#x27;x&#x27;</span>] ? <span class="built_in">string</span> : <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">type</span> A1 = P&lt;<span class="string">&#x27;x&#x27;</span> | <span class="string">&#x27;y&#x27;</span>&gt; <span class="comment">// number</span></span><br><span class="line"><span class="keyword">type</span> A2 = P&lt;<span class="built_in">never</span>&gt; <span class="comment">// string</span></span><br></pre></td></tr></table></figure><p>在条件判断类型的定义中，将泛型参数使用<code>[]</code>括起来，即可阻断条件判断类型的分配，此时，传入参数T的类型将被当做一个整体，不再分配</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.typescripttutorial.net/typescript-tutorial/typescript-extend-interface/">How to Extend Interfaces in TypeScript</a></li><li><a href="https://www.typescripttutorial.net/typescript-tutorial/typescript-generic-constraints/">TypeScript Generic Constraints</a></li><li><a href="https://juejin.cn/post/6998736350841143326">TS关键字extends用法总结</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/2/conditional-types.html">Conditional Types</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;extends&lt;/code&gt;关键字在TS中有多种用法，单独使用时，常见有以下</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="http://example.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript中的any、unknown、never如何理解</title>
    <link href="http://example.com/2022/08/15/TypeScript%E4%B8%AD%E7%9A%84any%E3%80%81unknown%E3%80%81never%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3/"/>
    <id>http://example.com/2022/08/15/TypeScript%E4%B8%AD%E7%9A%84any%E3%80%81unknown%E3%80%81never%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3/</id>
    <published>2022-08-15T13:06:41.000Z</published>
    <updated>2022-08-31T02:51:25.326Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="any"><a href="#any" class="headerlink" title="any"></a>any</h2><p>在TS中使用<code>any</code>类型，可以用来表示允许赋值给变量任意类型，这种方式与直接使用JS没有太大差别，无法享受到TS的类型检查，在可能出错的地方也不会发现错误。</p><p><code>any</code>类型本质上是类型系统的一个逃逸舱，那我们在什么情况下会使用该类型呢？</p><ul><li>无法确定当前类型时</li><li>逐步向TS迁移时</li></ul><p><strong>而在编写代码的过程中，明确知道类型的时候，有时为了偷懒，使用了<code>any</code>，这是一种不好的行为。</strong></p><p>而以下种种原因，可能都会对我们是否使用<code>any</code>有影响：</p><ul><li>添加类型时，需要编写大量代码，而<code>any</code>工作量很少</li><li>已经通过必要的运行时检查以防御性的方式编写了代码，以确保没有错误</li><li>有些参数很难正确输入，但是<code>any</code>更容易</li><li>不知道参数是什么</li><li>类型增加了很多复杂性，有时<code>any</code>更简单</li></ul><p>使用<code>any</code>还会造成类型污染的问题：即<code>any</code>类型的对象会导致后续的属性类型都会变成<code>any</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj: any = &#123; </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Cola&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.name = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h2><p>在TS的3.0版本中，引入了<code>unknown</code>类型，它可以这样理解成：**<code>unknown</code>类型是<code>any</code>的类型安全版本。**</p><p>这意味着如果要在TS中使用<code>unknown</code>类型时，需要知道它所指的类型，也就自然地推导出使用该类型的变量前，需要对该变量的类型进行断言。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">value: unknown</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// @ts-ignore: Object is of type &#x27;unknown&#x27;.</span></span><br><span class="line">  value.toFixed(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Type assertion:</span></span><br><span class="line">  (value <span class="keyword">as</span> number).toFixed(<span class="number">1</span>); <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 缩小为更具体的类型范围，包括 typeof 运算符，instanceof 运算符和自定义类型保护函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">       value.toFixed(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>unknown</code>类型只能被赋值给<code>any</code>类型和<code>unknown</code>类型本身。</p><p>因为只有能够保存任意类型值的容器才能保存<code>unknown</code> 类型的值，所以这个限制很合理。毕竟我们不知道变量中存储了什么类型的值。</p><h2 id="never"><a href="#never" class="headerlink" title="never"></a>never</h2><p><code>never</code>类型表示的是那些永不存在的值的类型，<code>never</code>类型是任何类型的子类型，也可以赋值给任何类型。</p><p>然而，没有类型是<code>never</code>的子类型或可以赋值给<code>never</code>类型（除了<code>never</code>本身之外）,<code>never</code>用于那些永不可发生的情况:</p><ul><li>一个从来不会有返回值的函数（如：如果函数内含有 <code>while(true) &#123;&#125;</code>）；</li><li>一个总是会抛出错误的函数（如：<code>function foo() &#123; throw new Error(&#39;Not Implemented&#39;) &#125;</code>，foo 的返回类型是 never）；</li></ul><h3 id="与-void-的差异"><a href="#与-void-的差异" class="headerlink" title="与 void 的差异"></a>与 void 的差异</h3><p><code>void</code>表示没有任何类型，<code>never</code>表示永远不存在的值的类型</p><h2 id="异同"><a href="#异同" class="headerlink" title="异同"></a>异同</h2><ul><li><code>any</code>和<code>unknown</code>是TS中所谓的顶级类型：当把类型看作是值的集合时，any 和 unknown 是包含所有值的集合</li><li><code>never</code>类型是TS中的底层类型：空集</li></ul><h2 id="以下或许是最佳实践"><a href="#以下或许是最佳实践" class="headerlink" title="以下或许是最佳实践"></a>以下或许是最佳实践</h2><ul><li>如果不是有意忽略类型检查，不使用<code>any</code></li><li>如果要用<code>any</code>，可以考虑用<code>unknown</code>代替（进行断言后使用）</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://wanago.io/2020/01/27/understanding-any-and-unknown-in-typescript-difference-between-never-and-void/">understanding-any-and-unknown-in-typescript-difference-between-never-and-void</a></p></li><li><p><a href="https://mariusschulz.com/blog/the-unknown-type-in-typescript">The unknown Type in TypeScript</a></p></li><li><p><a href="https://www.51cto.com/article/676734.html">使用 TypeScript 中的 Any 类型前，你需要了解的一切</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;any&quot;&gt;&lt;a href=&quot;#any&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="http://example.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript中的一些小技巧</title>
    <link href="http://example.com/2022/07/18/TypeScript%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://example.com/2022/07/18/TypeScript%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/</id>
    <published>2022-07-18T12:18:34.000Z</published>
    <updated>2023-07-19T01:28:11.643Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><p><strong>为什么通常来说类型声明的使用优先于类型断言</strong></p><p>：类型声明更够更有效地帮助我们进行类型检查</p><p>假设有如下定义：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当需要声明一个该类型变量时，可以有两种做法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> student_1: Person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student_2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span></span><br><span class="line">&#125; <span class="keyword">as</span> Person</span><br></pre></td></tr></table></figure><p>在常规情况下声明变量类型，优先使用第一种方式，这样能够帮助我们进行类型检查，这种错误提示显然是非常有用的，而使用断言时，有可能出现某个属性并不在断言的类型中的情况，这种情况下并没有报错</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> student_3: Person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">10</span> <span class="comment">// 报错：“age”不在类型“Person”中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student_4 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">10</span> <span class="comment">// ok</span></span><br><span class="line">&#125; <span class="keyword">as</span> Person</span><br></pre></td></tr></table></figure><p>类型断言只会影响 TypeScript 编译时的类型，类型断言语句在编译结果中会被删除，虽然最终转化出来的js能够运行正常，但这也会让同事感到迷惑</p><p><strong>什么时候使用类型断言？</strong></p><p>：只有你比TypeScript知道得更多的时候</p><p>举个🌰：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;submit-btn&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.sign-confirm-button&#x27;</span>)! <span class="keyword">as</span> HTMLButtonElement;</span><br></pre></td></tr></table></figure><p>由于TypeScript并不能访问到DOM，而作为开发者的我们，明确知道此处是一个按钮，这里就可以合理地断言成<code>HTMLButtonElement</code>，而非自动推断的<code>Element | null</code></p><p><strong>为什么尽量不使用包装类型</strong></p><ul><li><p>string 和 String</p></li><li><p>number 和 Number</p></li><li><p>boolean 和 Boolean</p></li><li><p>symbol 和 Symbol</p></li><li><p>bigint 和 BigInt</p></li></ul><p>用<code>string</code>举例，当我们在在字符串字面量上访问诸如 charAt 之类的方法时，JavaScript 将其包装在一个 String 对象中，调用该方法，然后丢弃该对象:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalCharAt = <span class="built_in">String</span>.prototype.charAt;</span><br><span class="line"><span class="built_in">String</span>.prototype.charAt = <span class="function"><span class="keyword">function</span>(<span class="params">pos</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">this</span>, <span class="keyword">typeof</span> <span class="built_in">this</span>, pos);</span><br><span class="line"> <span class="keyword">return</span> originalCharAt.call(<span class="built_in">this</span>, pos);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;primitive&#x27;</span>.charAt(<span class="number">3</span>));</span><br><span class="line"><span class="comment">//String &#123;&#x27;primitive&#x27;&#125; &#x27;object&#x27; 3</span></span><br><span class="line"><span class="comment">// m</span></span><br></pre></td></tr></table></figure><p>字符串和字符串对象不相等：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;John&quot;</span> === <span class="string">&quot;John&quot;</span>; <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;John&quot;</span> === <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;John&quot;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;John&quot;</span>) === <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;John&quot;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>在 TypeScript 中，可以将字符串基本类型 <code>string</code> 赋值给包装类型 <code>String</code>，但无法反过来将 <code>String</code> 赋值给 <code>string</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNameLength</span>(<span class="params">studentName: <span class="built_in">String</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> studentName.length; <span class="comment">// ok</span></span><br><span class="line">&#125;</span><br><span class="line">getNameLength(<span class="string">&#x27;John&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isStudent</span>(<span class="params">studentName: <span class="built_in">String</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;John&#x27;</span>].includes(studentName); <span class="comment">// 报错：类型“String”的参数不能赋给类型“string”的参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行时的值仍然是原始值，而不是对象，但是 TypeScript 允许这些声明，因为原始类型可以分配给对象包装器，这样看起来有些迷惑，所以最好统一使用原始类型</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;为什么通常来说类型声明的使用优先于类型断言&lt;/strong&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="http://example.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>lodash常用方法</title>
    <link href="http://example.com/2022/05/18/lodash%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2022/05/18/lodash%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2022-05-18T13:08:44.000Z</published>
    <updated>2023-07-19T01:27:24.348Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h2><h3 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h3><p>将数组（array）拆分成多个 <code>size</code> 长度的区块，并将这些区块组成一个新数组。 如果<code>array</code> 无法被分割成全部等长的区块，那么最后剩余的元素将组成一个区块</p><p><strong>入参</strong></p><ol><li><code>array</code> <em>(Array)</em>: 需要处理的数组</li><li><code>[size=1]</code> <em>(number)</em>: 每个数组区块的长度</li></ol><p><strong>返回值</strong></p><p><em>(Array)</em>: 返回一个包含拆分区块的新数组（注：相当于一个二维数组）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> result = _.chunk(arr, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// [ [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ], [ &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27; ], [ &#x27;g&#x27; ] ]</span></span><br></pre></td></tr></table></figure><h3 id="compact"><a href="#compact" class="headerlink" title="compact"></a>compact</h3><p>创建一个新数组，包含原数组中所有的非假值元素。例如<code>false</code>, <code>null</code>,<code>0</code>, <code>&quot;&quot;</code>, <code>undefined</code>, 和 <code>NaN</code> 都是被认为是“假值”</p><p><strong>入参</strong></p><ol><li><code>array</code> <em>(Array)</em>: 需要处理的数组</li></ol><p><strong>返回值</strong></p><p><em>(Array)</em>: 返回过滤掉假值的新数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">undefined</span>, <span class="literal">NaN</span>];</span><br><span class="line"><span class="keyword">const</span> result = _.compact(arr);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// [ &#x27;a&#x27;, true ]</span></span><br></pre></td></tr></table></figure><h3 id="difference"><a href="#difference" class="headerlink" title="difference"></a>difference</h3><p>创建一个具有唯一<code>array</code>值的数组，每个值不包含在其他给定的数组中。（注：即创建一个新数组，这个数组中的值，为第一个数字（<code>array</code> 参数）排除了给定数组中的值。）该方法使用<a href="http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero"><code>SameValueZero</code></a>做相等比较。结果值的顺序是由第一个数组中的顺序确定</p><p><strong>入参</strong></p><ol><li><code>array</code> <em>(Array)</em>: 要检查的数组</li><li><code>[values]</code> <em>(…Array)</em>: 排除的值</li></ol><p><strong>返回值</strong></p><p><em>(Array)</em>: 返回过滤掉假值的新数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">&#x27;可乐&#x27;</span>, <span class="string">&#x27;雪碧&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">&#x27;雪碧&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(_.difference(arr1, arr2)); <span class="comment">// [ &#x27;可乐&#x27; ]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果想要比较引用类型，可以使用`differenceBy`</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [&#123; <span class="attr">name</span>: <span class="string">&#x27;可乐&#x27;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;雪碧&#x27;</span> &#125;];</span><br><span class="line"><span class="keyword">const</span> arr2 = [&#123; <span class="attr">name</span>: <span class="string">&#x27;雪碧&#x27;</span> &#125;];</span><br><span class="line"><span class="built_in">console</span>.log(_.difference(arr1, arr2)); <span class="comment">// [ &#123; name: &#x27;可乐&#x27; &#125;, &#123; name: &#x27;雪碧&#x27; &#125; ]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [&#123; <span class="attr">name</span>: <span class="string">&#x27;可乐&#x27;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;雪碧&#x27;</span> &#125;];</span><br><span class="line"><span class="keyword">const</span> arr2 = [&#123; <span class="attr">name</span>: <span class="string">&#x27;雪碧&#x27;</span> &#125;];</span><br><span class="line"><span class="built_in">console</span>.log(_.differenceBy(arr1, arr2, <span class="function">(<span class="params">item</span>) =&gt;</span> item.name)); <span class="comment">// [ &#123; name: &#x27;可乐&#x27; &#125; ]</span></span><br></pre></td></tr></table></figure><h3 id="flattenDeep"><a href="#flattenDeep" class="headerlink" title="flattenDeep"></a>flattenDeep</h3><p>将<code>array</code>递归为一维数组</p><p><strong>入参</strong></p><ol><li><code>array</code> <em>(Array)</em>: 需要处理的数组</li></ol><p><strong>返回值</strong></p><p><em>(Array)</em>:返回一个的新一维数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>]]];</span><br><span class="line"><span class="keyword">const</span> result = _.flattenDeep(arr);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// [ 0, 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><h3 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h3><p>创建一个去重后的<code>array</code>数组副本。使用了<a href="http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero"><code>SameValueZero</code></a> 做等值比较。只有第一次出现的元素才会被保留</p><p><strong>入参</strong></p><ol><li><code>array</code> <em>(Array)</em>: 要检查的数组</li></ol><p><strong>返回值</strong></p><p><em>(Array)</em>:返回新的去重后的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> result = _.uniq(arr);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// [ 1, 2 ]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果想要去重引用类型，可以使用`unionBy`</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [&#123; <span class="attr">name</span>: <span class="string">&#x27;可乐&#x27;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;可乐&#x27;</span> &#125;];</span><br><span class="line"><span class="built_in">console</span>.log(_.unionBy(arr1, <span class="function">(<span class="params">item</span>) =&gt;</span> item.name)); <span class="comment">// [ &#123; name: &#x27;可乐&#x27; &#125; ]</span></span><br></pre></td></tr></table></figure><h3 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy"></a>groupBy</h3><p>创建一个对象，key 是 <code>iteratee</code> 遍历 <code>collection</code>(集合) 中的每个元素返回的结果。 分组值的顺序是由他们出现在 <code>collection</code>(集合) 中的顺序确定的。每个键对应的值负责生成 key 的元素组成的数组。iteratee 调用 1 个参数： <em>(value)</em></p><p><strong>入参</strong></p><p>1.<code>collection</code> <em>(Array|Object)</em>: 一个用来迭代的集合。</p><p>2.<code>[iteratee=_.identity]</code> <em>(Array|Function|Object|string)</em>: 这个迭代函数用来转换key</p><p><strong>返回值</strong></p><p><em>(Array)</em>:返回新的去重后的数组</p><h2 id="对象操作"><a href="#对象操作" class="headerlink" title="对象操作"></a>对象操作</h2><h3 id="omit"><a href="#omit" class="headerlink" title="omit"></a>omit</h3><p>这个对象由忽略属性之外的<code>object</code>自身和继承的可枚举属性组成</p><p><strong>入参</strong></p><ol><li><code>object</code> <em>(Object)</em>: 来源对象。</li><li><code>[props]</code> <em>(…(string|string[]))</em>: 要被忽略的属性</li></ol><p><strong>返回值</strong></p><p><em>(Object)</em>: 返回一个组成聚合的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object = &#123; <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(_.omit(object, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])); <span class="comment">// &#123; b: &#x27;2&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="omitBy"><a href="#omitBy" class="headerlink" title="omitBy"></a>omitBy</h3><p>这个对象忽略 <code>predicate</code>（断言函数）判断不是真值的属性后，<code>object</code>自身和继承的可枚举属性组成。<code>predicate</code>调用与2个参数：*(value, key)*</p><p><strong>入参</strong></p><ol><li><code>object</code> <em>(Object)</em>: 来源对象</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: 调用每一个属性的函数</li></ol><p><strong>返回值</strong></p><p><em>(Object)</em>: 返回新对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object = &#123; <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(_.omitBy(object, <span class="function">(<span class="params">key, value</span>) =&gt;</span> <span class="keyword">typeof</span> object[value] === <span class="string">&#x27;number&#x27;</span>)); <span class="comment">// &#123; b: &#x27;2&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="pick"><a href="#pick" class="headerlink" title="pick"></a>pick</h3><p>创建一个从 <code>object</code> 中选中的属性的对象</p><p><strong>入参</strong></p><ol><li><code>object</code> <em>(Object)</em>: 来源对象。</li><li><code>[props]</code> <em>(…(string|string[]))</em>: 要被选中的属性</li></ol><p><strong>返回值</strong></p><p><em>(Object)</em>: 返回新对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object = &#123; <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(_.pick(object, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])); <span class="comment">// &#123; a: 1, c: 3 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="pickBy"><a href="#pickBy" class="headerlink" title="pickBy"></a>pickBy</h3><p>创建一个对象，这个对象组成为从 <code>object</code> 中经 <code>predicate</code> 判断为真值的属性。 <code>predicate</code>调用2个参数：*(value, key)*。</p><p><strong>入参</strong></p><ol><li><code>object</code> <em>(Object)</em>: 来源对象。</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: 调用每一个属性的函数</li></ol><p><strong>返回值</strong></p><p><em>(Object)</em>: 返回新对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object = &#123; <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(_.pickBy(object, _.isNumber)); <span class="comment">// &#123; a: 1, c: 3 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>根据 <code>object</code>对象的<code>path</code>路径获取值。 如果解析 value 是 <code>undefined</code> 会以 <code>defaultValue</code> 取代</p><p><strong>入参</strong></p><ol><li><code>object</code> <em>(Object)</em>: 要检索的对象</li><li><code>path</code> <em>(Array|string)</em>: 要获取属性的路径</li><li><code>[defaultValue]</code> <em>(*)</em>: 如果解析值是 <code>undefined</code> ，这值会被返回</li></ol><p><strong>返回值</strong></p><p><em>(*)</em>: 返回解析的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object = &#123; <span class="string">&#x27;a&#x27;</span>: [&#123; <span class="string">&#x27;b&#x27;</span>: &#123; <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span> &#125; &#125;] &#125;;</span><br><span class="line"> </span><br><span class="line">_.get(object, <span class="string">&#x27;a[0].b.c&#x27;</span>); <span class="comment">// 3</span></span><br><span class="line">_.get(object, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]); <span class="comment">// 3</span></span><br><span class="line">_.get(object, <span class="string">&#x27;a.b.c&#x27;</span>, <span class="string">&#x27;default&#x27;</span>); <span class="comment">// &#x27;default&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;数组操作&quot;&gt;&lt;a href=&quot;#数组操作&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Sass、Less的区别</title>
    <link href="http://example.com/2022/03/27/Sass%E3%80%81Less%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2022/03/27/Sass%E3%80%81Less%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-03-27T13:32:01.000Z</published>
    <updated>2023-08-03T13:26:43.022Z</updated>
    
    <content type="html"><![CDATA[<h2 id="预处理器带来了什么"><a href="#预处理器带来了什么" class="headerlink" title="预处理器带来了什么"></a>预处理器带来了什么</h2><p>CSS (Cascading Style Sheets，层叠样式表)，是一种用来为结构化文档（如 HTML 文档或 XML 应用）添加样式（字体、间距和颜色等）的计算机语言</p><p>CSS 预处理器通过引入一些特性，让 CSS 具备了编程的潜力，使 CSS 的编写更加动态</p><h2 id="二者相似之处"><a href="#二者相似之处" class="headerlink" title="二者相似之处"></a>二者相似之处</h2><p>Sass、Less 在语法上有些共性，比如下面这些：</p><ul><li>支持变量</li><li>支持混入</li><li>支持运算</li></ul><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><h3 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h3><ul><li>Less 基于 JavaScript ，是在客户端处理的</li><li>Sass 基于 Ruby ,是在服务端处理的</li></ul><h3 id="变量符号"><a href="#变量符号" class="headerlink" title="变量符号"></a>变量符号</h3><p>Less 用 <code>@</code>，Sass 用 <code>$</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@color:</span> <span class="number">#00c</span>; <span class="comment">/* 蓝色 */</span></span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>: <span class="number">#00c</span>; <span class="comment">/* 蓝色 */</span></span><br></pre></td></tr></table></figure><h3 id="SCSS-支持条件语句，LESS-不支持"><a href="#SCSS-支持条件语句，LESS-不支持" class="headerlink" title="SCSS 支持条件语句，LESS 不支持"></a>SCSS 支持条件语句，LESS 不支持</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@if</span> 条件 &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">@else</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> to <span class="number">10</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// 不包含10;</span></span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through <span class="number">10</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// 包含10;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@each</span> item in a, b, c, d&#123;</span><br><span class="line">    <span class="comment">//item表示每一项</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用外部-CSS-文件方式不同"><a href="#引用外部-CSS-文件方式不同" class="headerlink" title="引用外部 CSS 文件方式不同"></a>引用外部 CSS 文件方式不同</h3><p>如果需要导入 SCSS 或者 Sass 文件，但又不希望将其编译为 CSS，只需要在文件名前添加下划线，这样会告诉 Sass 不要编译这些文件，但导入语句中却不需要添加下划线</p><p>例如，将文件命名为 _colors.scss，便不会编译_colors.css 文件</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;colors&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="颜色函数"><a href="#颜色函数" class="headerlink" title="颜色函数"></a>颜色函数</h3><p>调整色相时，SCSS 使用<code>adjust_hue()</code>，LESS 使用<code>spin()</code></p><h2 id="一些常见的疑问"><a href="#一些常见的疑问" class="headerlink" title="一些常见的疑问"></a>一些常见的疑问</h2><p>Sass 与 Scss 是什么关系?</p><p>Sass的缩排语法并不直观，也不能将 CSS 代码加入到 Sass 里面，因此 Sass 语法进行了改良，Sass 3 就变成了Scss(sassy css)。与原来的语法兼容，只是用{}取代了原来的缩进。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;预处理器带来了什么&quot;&gt;&lt;a href=&quot;#预处理器带来了什么&quot; class=&quot;headerlink&quot; title=&quot;预处理器带来了什么&quot;&gt;&lt;/a&gt;预处理器带来了什么&lt;/h2&gt;&lt;p&gt;CSS (Cascading Style Sheets，层叠样式表)，是一种用来为结</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>网络相关常见知识点汇总</title>
    <link href="http://example.com/2022/02/19/%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    <id>http://example.com/2022/02/19/%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/</id>
    <published>2022-02-19T08:11:41.000Z</published>
    <updated>2022-02-25T06:55:39.576Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://www.png8.com/imgs/2022/02/7f0a206c63646d10.png" alt="网络相关常见知识点汇总.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/6908327746473033741">「2021」高频前端面试题汇总之计算机网络篇</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;思维导图&quot;&gt;&lt;a href=&quot;#思维导图&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="思维导图" scheme="http://example.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
    <category term="网络" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 如何实现单例模式</title>
    <link href="http://example.com/2022/01/05/JavaScript%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/01/05/JavaScript%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-05T14:56:59.000Z</published>
    <updated>2022-01-06T01:29:52.988Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>单例模式，也叫单子模式，是一种常用的软件设计模式，属于<code>创建型模式</code>的一种。</p><p>保证一个类<code>仅有一个实例</code>，并提供一个访问它的<code>全局访问点</code>。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p><strong>全局变量符合单例模式吗？</strong></p><p>不是。但我们经常会把变量当成单例来使用，看个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br></pre></td></tr></table></figure><p>通过字面量创建对象时，对象<code>person</code>确实是独一无二的，如果该变量在全局作用域下声明，就可以在代码中的任何地方使用它。</p><p>但是全局变量存在一些问题：</p><ul><li>污染命名空间（变量名冲突）</li><li>不易维护 (被覆盖)</li></ul><p>并且随着项目的体积和功能增大，出现问题的概率也会增大。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>首先我们要清楚 JS 是一门<code>没有类</code>的语言，ES6 出现类也是原型的语法糖。也正因为没有类，在 JS 中实现单例模式也只需要一个<code>唯一</code>的对象，这是很自然的做法。</p><p>这里以一个登录弹窗为例，实践一下单例模式。</p><p>假设现在有一个登录按钮，点击后能够出现登录弹窗：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;loginBtn&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先来写创建登录弹窗的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> doCreateLoginModal = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> modal = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  modal.style.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">  modal.textContent = <span class="string">&quot;登录弹窗&quot;</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(modal);</span><br><span class="line">  <span class="keyword">return</span> modal;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来就是单例模式的重点了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getInstance = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> result || (result = fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createLoginModal = getInstance(doCreateLoginModal);</span><br></pre></td></tr></table></figure><p>这里可以发现返回的结果被封装在闭包（内部的函数被保存到了外部）产生的作用域中，外部是访问不到这两个变量的，这就避免了对全局的命名污染。</p><p>先看这段代码中产生的闭包：</p><p>最后一行外部的<code>createLoginModal</code>变量保存了<code>getInstance</code>中的匿名函数，该拥有<code>getInstance</code>作用域的访问权限。</p><p>再仔细看<code>return result || (result = fn.apply(this, arguments));</code>这条语句：</p><p>第一次调用方法时，<code>result</code>为<code>undefined</code>,会执行<code>result = fn.apply(this, arguments)</code>,这里利用传入的<code>fn</code>调用生成登录弹窗的方法生成登录弹窗，并被赋值给<code>result</code>，使得之后<code>createLoginModal</code>再被调用时，返回第一次创建的登录弹窗。</p><p>最后给按钮绑定点击事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loginBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;loginBtn&quot;</span>);</span><br><span class="line"></span><br><span class="line">loginBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> loginModal = createLoginModal();</span><br><span class="line">  loginModal.style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/HJY-xh/plantTrees/blob/master/Demos/%5BJavaScript%5D%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E5%BC%B9%E7%AA%97/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html">完整代码</a></p><h2 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h2><p>惰性单例指的是在需要的时候菜创建对象实例。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F">单例模式-维基百科</a></p><p>书目</p><ul><li><p>JavaScript 设计模式与开发实践</p></li><li><p>JavaScript 设计模式</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>关于懒加载</title>
    <link href="http://example.com/2022/01/05/%E5%85%B3%E4%BA%8E%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <id>http://example.com/2022/01/05/%E5%85%B3%E4%BA%8E%E6%87%92%E5%8A%A0%E8%BD%BD/</id>
    <published>2022-01-05T12:35:12.000Z</published>
    <updated>2023-07-19T01:26:17.329Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="懒加载概念"><a href="#懒加载概念" class="headerlink" title="懒加载概念"></a>懒加载概念</h2><p><strong>懒加载也叫延迟加载，指的是在长网页中延迟加载图像，是一种很好优化网页性能的方式</strong>。</p><p>用户滚动到它们之前不加载，也就是在可视区域之外的图像不会加载。</p><h2 id="使用场景和优势"><a href="#使用场景和优势" class="headerlink" title="使用场景和优势"></a>使用场景和优势</h2><p>在一些电商类的项目中，往往存在大量的图片，比如广告图、商品图等等。图片的数量和体积会影响页面加载速度，而进行图片懒加载优化可以大幅提升用户体验</p><ul><li><p><strong>减少无效资源的加载</strong></p></li><li><p><strong>防止并发加载的资源过多会阻塞JS的加载</strong></p></li></ul><p>可以看出来，懒加载的核心目的就是<strong>提升用户的体验</strong></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h3><p>将页面上的图片的 src 属性设置为项目中引入一个默认的图片路径，而图片的真实路径则设置在<strong>自定义数据属性</strong>中，比如说<code>data-original</code>， 同时监听scroll事件，在scroll事件的回调中，判断需要进行懒加载的图片是否进入可视区域，如果图片在可视区内将图片的 <code>src</code> 属性设置为<code>data-original</code> 的值</p><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Lazyload<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.image-item</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/1.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/2.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/3.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/4.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/5.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/6.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/7.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/8.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/9.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/10.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/11.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/12.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取可视区高度</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> viewHeight = <span class="built_in">document</span>.body.clientHeight;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 懒加载</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">lazyload</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> imgs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;img[data-src][lazyload]&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">Array</span>.prototype.forEach.call(imgs, <span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> rect = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (item.dataset.original === <span class="string">&quot;&quot;</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 用于获得页面中某个元素的左，上，右和下分别相对浏览器视窗的位置</span></span></span><br><span class="line"><span class="javascript">                rect = item.getBoundingClientRect();</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (rect.bottom &gt;= <span class="number">0</span> &amp;&amp; rect.top &lt; viewHeight) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span></span><br><span class="line"><span class="javascript">                    img.src = item.dataset.original;</span></span><br><span class="line"><span class="javascript">                    img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        item.src = img.src;</span></span><br><span class="line"><span class="javascript">                    &#125;;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 移除属性，下次不再遍历</span></span></span><br><span class="line"><span class="javascript">                    item.removeAttribute(<span class="string">&quot;data-src&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 标记已懒加载</span></span></span><br><span class="line"><span class="javascript">                    item.removeAttribute(<span class="string">&quot;lazyload&quot;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 节流，性能优化</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> tiemr = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> that = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> _args = args;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (!tiemr) &#123;</span></span><br><span class="line"><span class="javascript">                    timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        fn.call(that, _args);</span></span><br><span class="line"><span class="javascript">                        timer = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;, delay);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 刚开始还没滚动屏幕时，要先触发一次函数，初始化首页的页面图片</span></span></span><br><span class="line"><span class="javascript">        lazyload();</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.addEventListener(<span class="string">&quot;scroll&quot;</span>, throttle(lazyload, <span class="number">200</span>));</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h3><p>思路一需要去监听 <code>scroll</code> 事件，虽然通过函数节流的方式来阻止高频率的执行函数，但是还是需要去计算高度等属性，而 <strong><code>IntersectionObserver</code></strong> 接口提供了一种异步观察目标元素与其祖先元素或顶级文档<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Viewport">视口</a>（viewport）交叉状态（可见）的方法。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver">相关API介绍</a></p><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Lazyload<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.image-item</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/1.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/2.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/3.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/4.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/5.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/6.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/7.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/8.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/9.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/10.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/11.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/12.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> imgs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;img[data-src]&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> config = &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">rootMargin</span>: <span class="string">&#x27;0px&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">threshold</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function">(<span class="params">entries, self</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            entries.forEach(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (entry.isIntersecting) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> img = entry.target</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> src = img.dataset.src</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (src) &#123;</span></span><br><span class="line"><span class="javascript">                        img.src = src</span></span><br><span class="line"><span class="javascript">                        img.removeAttribute(<span class="string">&#x27;data-src&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                        img.removeAttribute(<span class="string">&quot;lazyload&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 解除观察</span></span></span><br><span class="line"><span class="javascript">                    self.unobserve(entry.target)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;, config)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        imgs.forEach(<span class="function">(<span class="params">image</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            observer.observe(image)</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;懒加载概念&quot;&gt;&lt;a href=&quot;#懒加载概念&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript、性能优化" scheme="http://example.com/tags/JavaScript%E3%80%81%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>React Hook解析</title>
    <link href="http://example.com/2021/12/28/React%20Hook%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2021/12/28/React%20Hook%E8%A7%A3%E6%9E%90/</id>
    <published>2021-12-28T12:23:54.000Z</published>
    <updated>2022-01-25T08:34:05.040Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="问题列表"><a href="#问题列表" class="headerlink" title="问题列表"></a>问题列表</h2><p>带着以下问题学习：</p><ul><li>Hook解决了什么问题？</li><li>Hook有哪些优势？</li><li>为什么有Hook？</li><li>useState方括号有什么用？</li><li>为什么每次更新的时候都要运行 Effect?</li><li>useMemo 和 shouldComponentUpdate 有什么区别？</li></ul><h2 id="Hook概述"><a href="#Hook概述" class="headerlink" title="Hook概述"></a>Hook概述</h2><ul><li><p>React 16.8的新增特性</p></li><li><p>它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性（是一些可以让你在函数组件里“钩入” React state 及生命周期等特性的函数）</p></li></ul><h2 id="Hook的动机"><a href="#Hook的动机" class="headerlink" title="Hook的动机"></a>Hook的动机</h2><ul><li>在无需修改组件结构的情况下复用状态逻辑</li></ul><p>在组件之间复用状态逻辑很难</p><p>Hook出现之前，将可复用性行为”附加“到组件的解决方案有<code>render props</code>和<code>高阶组件</code>，但是这类方案需要重新组织组件结构，可能会很麻烦，进而让代码难以理解。</p><ul><li>Hook将组件中相互关联的部分拆分成更小的函数（比如监听事件、请求数据），而并非强制按照生命周期划分</li></ul><p>组件期初很简单，但是逐渐会被状态逻辑和副作用充斥，相关关联且需要对照修改的代码被拆分（监听事件），不相关的代码在同一个方法中（<code>componentDidMount</code>、<code>componentWillUnmount</code>)组合在一起，容易产生bug。</p><ul><li>降低学习门槛</li></ul><p>对class的学习（需要理解JS中的this工作方式）</p><h2 id="Hook使用规则"><a href="#Hook使用规则" class="headerlink" title="Hook使用规则"></a>Hook使用规则</h2><ul><li><p>只能在函数最外层调用Hook。不要在循环、条件判断或者子函数中调用</p><p>  这样能够确保Hook在每一次渲染中都按照同样的顺序被调用</p></li><li><p>只能在React的函数组件中调用Hook（包括自定义的Hook）</p></li></ul><h2 id="常见的Hook"><a href="#常见的Hook" class="headerlink" title="常见的Hook"></a>常见的Hook</h2><ul><li><p>基础 Hook</p><ul><li>useState</li><li>useEffect<ul><li>说明<pre><code>  - 可以把该Hook看做是`componentDidMount`、`componentDidUpdate`、`componentWillUnmout`三个函数的组合  - React保证了每次运行effect的同时，DOM都已经更新完毕  - 与`componentDidMount`或`componentDidUpdate`不同，使用useEffect调度的effect不会阻塞浏览器更新屏幕，这让应用看起来响应更快  - effect中可选的清除机制在组件卸载的时候触发</code></pre></li><li>使用技巧<pre><code>  - 使用多个 Effect 实现关注点分离（按照代码的用途分离它们），React将按照effect声明的顺序一次调用组建的每一个effect  - 跳过 Effect 进行性能优化（第二个参数）</code></pre></li></ul></li><li>useContext<pre><code>接收一个 context 对象（`React.createContext` 的返回值）并返回该 context 的当前值</code></pre></li></ul></li><li><p>额外的 Hook</p><ul><li>useReducer<br>useState 的替代方案。它接收一个形如 <code>(state, action) =&gt; newState</code> 的 reducer，并返回当前的 state 以及与其配套的 dispatch 方法</li><li>useCallback<br>useCallback(fn, deps) 相当于 useMemo(() =&gt; fn, deps)</li><li>useMemo<br>可以把 useMemo 作为性能优化的手段，但不要把它当成语义上的保证<br>可以使用它缓存一些相对耗时的计算，也非常适合用于存储引用类型的数据，可以传入对象字面量，匿名函数等，甚至是 React Element</li><li>useRef<br>useRef 返回一个可变的 ref 对象，其 <code>.current</code> 属性被初始化为传入的参数（initialValue）</li><li>useImperativeHandle<ul><li>useImperativeHandle 可以在使用 ref 时自定义暴露给父组件的实例值</li><li>在大多数情况下，应当避免使用 ref 这样的命令式代码</li><li>useImperativeHandle 应当与 <code>forwardRef</code> 一起使用</li></ul></li><li>useLayoutEffect<br>其函数签名与 useEffect 相同，但它会在所有的 DOM 变更之后同步调用 effect。可以使用它来读取 DOM 布局并同步触发重渲染</li><li>useDebugValue<br>useDebugValue 可用于在 React 开发者工具中显示自定义 hook 的标签,它接受一个格式化函数作为可选的第二个参数。该函数只有在 Hook 被检查时才会被调用。它接受 debug 值作为参数，并且会返回一个格式化的显示值</li></ul></li></ul><h2 id="自定义Hook"><a href="#自定义Hook" class="headerlink" title="自定义Hook"></a>自定义Hook</h2><p>通过自定义 Hook，可以将组件逻辑提取到可重用的函数中</p><p>字应该始终以 use 开头，这样可以一眼看出其符合 Hook 的规则</p><p>自定义 Hook 是一种自然遵循 Hook 设计的约定，而并不是 React 的特性</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li><p>函数组件执行函数<code>renderWithHooks</code></p><ul><li>作用<br>它是调用<code>function组件</code>函数的主要函数，从源码中看，它首先会置空即将调和渲染的<code>workInProgress树</code>的<code>memoizedState</code>和<code>updateQueue</code>，把新的hooks信息挂载到这两个属性上，然后在组件<code>commit阶段</code>，将<code>workInProgress树</code>替换成<code>current树</code>，替换真实的DOM元素节点。并在current树保存hooks信息。</li><li>步骤<ul><li>执行函数组件</li><li>改变<code>ReactCurrentDispatcher</code>对象</li></ul></li></ul></li><li><p>初始化hooks</p><p>  相关hook实际执行的函数:</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">useState: mountState, <span class="comment">// 初始化useState</span></span><br><span class="line"><span class="attr">useEffect</span>: mountEffect, <span class="comment">// 初始化useEffect</span></span><br><span class="line"><span class="attr">useLayoutEffect</span>: mountLayoutEffect, <span class="comment">// 初始化useLayoutEffect</span></span><br><span class="line"><span class="attr">useMemo</span>: mountMemo, <span class="comment">// 初始化useMemo</span></span><br><span class="line"><span class="attr">useReducer</span>: mountReducer, <span class="comment">// 初始化useReducer</span></span><br><span class="line"><span class="attr">useRef</span>: mountRef, <span class="comment">// 初始化useRef</span></span><br><span class="line"><span class="attr">useCallback</span>: mountCallback, <span class="comment">// 初始化useCallback</span></span><br></pre></td></tr></table></figure><p>  <code>mountWorkInProgressHook</code>生成hook链表</p><ul><li>在一个函数组件第一次渲染时，每个hook执行，都会产生一个hook对象，并形成链表结构，绑定在<code>workInProgress</code>的<code>memoizedState</code>属性上</li><li>hook上的状态，绑定在当前hook对象的<code>memoizedState</code>属性上</li><li>对于effect副作用钩子，会绑定在<code>workInProgress.updateQueue</code>上，等到<code>commit阶段</code>，dom树构建完成，再执行每个 effect 副作用钩子。</li></ul></li><li><p>更新hooks</p><p>  相关hook实际执行的函数:</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">useState: updateState, <span class="comment">// 得到最新的state</span></span><br><span class="line"><span class="attr">useEffect</span>: updateEffect, <span class="comment">// 更新updateQueue</span></span><br><span class="line"><span class="attr">useLayoutEffect</span>: updateLayoutEffect,</span><br><span class="line"><span class="attr">useMemo</span>: updateMemo,</span><br><span class="line"><span class="attr">useReducer</span>: updateReducer,</span><br><span class="line"><span class="attr">useRef</span>: updateRef, <span class="comment">// 获取ref对象</span></span><br><span class="line"><span class="attr">useCallback</span>: updateCallback</span><br></pre></td></tr></table></figure><p>  <code>updateWorkInProgressHook</code>更新hook链表，找到对应的hooks</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh-hans.reactjs.org/docs/hooks-intro.html">官方文档</a></p><p><a href="https://juejin.cn/post/6844904165500518414">React Hooks 最佳实践</a></p><p><a href="https://juejin.cn/post/6864438643727433741">react-hooks如何使用？</a></p><p><a href="https://juejin.cn/post/6944863057000529933#heading-0">一文吃透react-hooks原理</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题列表&quot;&gt;&lt;a href=&quot;#问题列表&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="React" scheme="http://example.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>常见的排序算法</title>
    <link href="http://example.com/2021/12/19/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2021/12/19/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2021-12-19T02:41:09.000Z</published>
    <updated>2021-12-23T07:18:00.697Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="常见的排序"><a href="#常见的排序" class="headerlink" title="常见的排序"></a>常见的排序</h2><p><img src="https://s2.loli.net/2021/12/13/JeNhZmiWYlv85Ot.png"></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>说明：重复遍历要排序的数列，一次比较两个元素，按排序顺序交换元素值，不断遍历直到没有再需要交换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bubbleSort = <span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> output = [...input];</span><br><span class="line">    <span class="keyword">const</span> length = output.length;</span><br><span class="line">    <span class="keyword">let</span> hasSwap = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (output[j] &gt; output[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">let</span> temp = output[j];</span><br><span class="line">                output[j] = output[j + <span class="number">1</span>];</span><br><span class="line">                output[j + <span class="number">1</span>] = temp;</span><br><span class="line">                hasSwap = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!hasSwap) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>说明：遍历数组，找到数据应该插入的位置将其插入即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> insertSort = <span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> output = [...input];</span><br><span class="line">    <span class="keyword">const</span> length = output.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> temp = output[i];</span><br><span class="line">        <span class="keyword">let</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; output[j] &gt; temp) &#123;</span><br><span class="line">            output[j + <span class="number">1</span>] = output[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        output[j + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>说明: 每一次从待排序的数据元素中选出最小（或最大）的一个元素，放到已排序数组的末尾</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> selectSort = <span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> output = [...input];</span><br><span class="line">    <span class="keyword">const</span> length = output.length;</span><br><span class="line">    <span class="keyword">let</span> minIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (output[j] &lt; output[minIndex]) &#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = output[i];</span><br><span class="line">        output[i] = input[minIndex];</span><br><span class="line">        output[minIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>说明：归并的的核心思想是分治。它把数组从中间划分成两个数组，一直递归把子数组划分成更小的数组，知道数组中元素个数为1时进行排序。按大小顺序合并两个数组，接着按照递归的顺序返回，不断合并排好序的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mergeSort = <span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> length = input.length;</span><br><span class="line">    <span class="keyword">if</span> (length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> middle = <span class="built_in">Math</span>.floor(length / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">const</span> left = input.slice(<span class="number">0</span>, middle);</span><br><span class="line">    <span class="keyword">const</span> right = input.slice(middle);</span><br><span class="line">    <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> merge = <span class="function">(<span class="params">left, right</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">while</span> (left.length &amp;&amp; right.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left[<span class="number">0</span>] &lt; right[<span class="number">0</span>]) &#123;</span><br><span class="line">            result.push(left.shift());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.push(right.shift());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (left.length) &#123;</span><br><span class="line">        result.push(left.shift());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (right.length) &#123;</span><br><span class="line">        result.push(right.shift());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>说明：它是冒泡排序的一种改进，通过元素之间的比较和交换位置来达到排序的目的。快排在每一轮挑选一个基准元素，把剩下的元素同它进行比较，大于它的放到数列的一边，小于它的放到数列的另一边，一轮比较完成后，整个序列以选取的基准元素位为界，左侧均小于基准元素，右侧均大于基准元素。但左右两侧内部并不是有序的(左右两侧关键字个数也不一定相同)。进而继续将左右两侧分别再以这种方式进行排序，直到将序列拆分的剩余一个关键字为止，整个序列即变成有序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> quickSort = <span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (input.length &lt;= <span class="number">1</span>) &#123; <span class="keyword">return</span> input; &#125;</span><br><span class="line">    <span class="keyword">const</span> left = [];</span><br><span class="line">    <span class="keyword">const</span> right = [];</span><br><span class="line">    <span class="keyword">const</span> middle = input.splice(<span class="built_in">Math</span>.round(input.length / <span class="number">2</span>), <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; input.length; i++) &#123;</span><br><span class="line">        (middle &gt; input[i] ? left : right).push(input[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [...quickSort(left), middle, ...quickSort(right)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;常见的排序&quot;&gt;&lt;a href=&quot;#常见的排序&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript思维导图</title>
    <link href="http://example.com/2021/12/09/TypeScript%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    <id>http://example.com/2021/12/09/TypeScript%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</id>
    <published>2021-12-09T13:34:11.000Z</published>
    <updated>2022-01-06T01:31:21.439Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://s2.loli.net/2021/12/10/GpcItLvliHzMWRA.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>深入理解 TypeScript</p><p><a href="https://www.typescriptlang.org/">https://www.typescriptlang.org/</a></p><p><a href="https://www.tslang.cn/index.html">https://www.tslang.cn/index.html</a></p><p><a href="https://stackoverflow.com/questions/28818849/how-do-the-different-enum-variants-work-in-typescript">https://stackoverflow.com/questions/28818849/how-do-the-different-enum-variants-work-in-typescript</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;思维导图&quot;&gt;&lt;a href=&quot;#思维导图&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="思维导图" scheme="http://example.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>JS中数据类型的检测方法</title>
    <link href="http://example.com/2021/11/27/JS%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2021/11/27/JS%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95/</id>
    <published>2021-11-27T13:32:01.000Z</published>
    <updated>2023-08-03T13:25:30.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS中数据类型检测有哪些"><a href="#JS中数据类型检测有哪些" class="headerlink" title="JS中数据类型检测有哪些"></a>JS中数据类型检测有哪些</h2><ul><li>typeof [value]  ：检测数据类型的运算符</li><li>[example] instanceof [class] ： 检测某一个实例是否属于这个类</li><li>[example].constructor === [class] ：检测实例和类关系的，从而检测数据类型</li><li>Object.prototype.toString.call([value])：检测数据类型</li></ul><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p>该关键字使用起来简单，基本数据类型和引用数据类型基本上都可以有效检测</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">1</span>); <span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">1n</span>); <span class="comment">// bigint</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="string">&#x27;1&#x27;</span>); <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> []); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">true</span>); <span class="comment">// boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;); <span class="comment">// function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Symbol</span>(<span class="string">&#x27;1&#x27;</span>)); <span class="comment">// symbol</span></span><br></pre></td></tr></table></figure><p>一些需要注意的地方：</p><ul><li>NaN / Infinity 都是数字类型的，检测结果都是 number</li><li>typeof null 的结果是 object<br>  所有的值在计算中都以二进制编码储存，浏览器中把前三位000的当作对象，而null的二进制前三位是000，所以被识别为对象，但是他不是对象，他是空对象指针，是基本类型值</li></ul><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>该关键字用来检测某个实例是否属于这个类， 即类的原型只要出现在了实例的原型链上就返回 true，基于这种方式，可以弥补 typeof 无法细分对象类型的缺点（想检测这个值是否为数组，只需要看他是否为Array类的实例即可）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Date</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>一些需要注意的地方：</p><ul><li>被检测的实例必须是引用类型，对基本数据类型值操作无效</li></ul><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><p>该关键字判断当前实例的 constructor 属性是不是预估的类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="built_in">console</span>.log(arr.constructor === <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.constructor === <span class="built_in">Array</span>.prototype.constructor); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.constructor <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.constructor <span class="keyword">instanceof</span> <span class="built_in">Object</span>.prototype.constructor); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>一些需要注意的地方：</p><ul><li>有可能不准确， constructor 属性能够被用户修改</li><li>null 和 undefined 不适用</li></ul><h2 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h2><p>每种数据类型的构造函数的原型上都有toString方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> toString = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(<span class="number">10</span>)); <span class="comment">//[object Number]</span></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(<span class="literal">NaN</span>)); <span class="comment">//[object Number]</span></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(<span class="string">&#x27;xxx&#x27;</span>)); <span class="comment">//[object String]</span></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(<span class="literal">true</span>)); <span class="comment">//[object Boolean]</span></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(<span class="literal">null</span>)); <span class="comment">//[object Null]</span></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(<span class="literal">undefined</span>)); <span class="comment">//[object Undefined]</span></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(<span class="built_in">Symbol</span>())); <span class="comment">//[object Symbol]</span></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(<span class="built_in">BigInt</span>(<span class="number">10</span>))); <span class="comment">//[object BigInt]</span></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(&#123;<span class="attr">xxx</span>:<span class="string">&#x27;xxx&#x27;</span>&#125;)); <span class="comment">//[object Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(toString.call([<span class="number">10</span>,<span class="number">20</span>])); <span class="comment">//[object Array]</span></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(<span class="regexp">/^\d+$/</span>)); <span class="comment">//[object RegExp]</span></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)); <span class="comment">//[object Function] </span></span><br></pre></td></tr></table></figure><p>一些需要注意的地方：</p><ul><li>自定义类返回的都是 [object Object]</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JS中数据类型检测有哪些&quot;&gt;&lt;a href=&quot;#JS中数据类型检测有哪些&quot; class=&quot;headerlink&quot; title=&quot;JS中数据类型检测有哪些&quot;&gt;&lt;/a&gt;JS中数据类型检测有哪些&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;typeof [value]  ：检测数据类型的</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
