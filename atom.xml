<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>可乐加冰</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-07-19T01:25:53.608Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>HJY</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二进制数据处理（尚未完成）</title>
    <link href="http://example.com/2023/03/22/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2023/03/22/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</id>
    <published>2023-03-22T13:45:32.000Z</published>
    <updated>2023-07-19T01:25:53.608Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="ArrayBuffer，二进制数组"><a href="#ArrayBuffer，二进制数组" class="headerlink" title="ArrayBuffer，二进制数组"></a>ArrayBuffer，二进制数组</h2><p>在web开发中，经常要用到二进制数据来处理文件相关的操作，比如上传、下载各种文档和图像</p><p><strong>在JS中基本的的二进制对象是<code>ArrayBuffer</code>，它本质上是一段固定长度的连续内存空间的引用</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;ArrayBuffer，二进制数组&quot;&gt;&lt;a href=&quot;#ArrayBuffe</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>事件总线机制</title>
    <link href="http://example.com/2023/01/12/%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/2023/01/12/%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF%E6%9C%BA%E5%88%B6/</id>
    <published>2023-01-12T14:19:22.000Z</published>
    <updated>2023-07-19T01:24:30.830Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>事件总线(EventBus) 是一种消息传递的方式</p><p>它可以让两个没有关联的组件进行通信，起到数据传输的作用</p><p>举个例子，当<code>module N</code>发布了<code>Event 1</code>消息，订阅该消息的<code>module 1</code>就会收到相关消息（过程如下所示）</p><p><img src="https://raw.githubusercontent.com/HJY-xh/pictures/master/pictures/202302071430325.png"></p><h2 id="场景举例"><a href="#场景举例" class="headerlink" title="场景举例"></a>场景举例</h2><p>现在有一所学校，学校里面有一些事件发生，学生能够根据事件类型做出相应的动作</p><p>用代码表述</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EventBus就是事件总线，这里可以思考一下它应该具备什么功能以及如何编写</span></span><br><span class="line"><span class="keyword">let</span> EB = <span class="keyword">new</span> EventBus();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生对事件类型做出的反应</span></span><br><span class="line">EB.$on(<span class="string">&#x27;上课&#x27;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">`学生<span class="subst">$&#123;name&#125;</span>到上课地点`</span>);</span><br><span class="line">&#125;)</span><br><span class="line">EB.$on(<span class="string">&quot;教室上课&quot;</span>, <span class="function">(<span class="params">name, course</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">`学生<span class="subst">$&#123;name&#125;</span>去教室上<span class="subst">$&#123;course&#125;</span>课`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> id = EB.$on(<span class="string">&quot;户外上课&quot;</span>, <span class="function">(<span class="params">name, course</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">`学生<span class="subst">$&#123;name&#125;</span>去户外上<span class="subst">$&#123;course&#125;</span>课`</span>);</span><br><span class="line">&#125;)</span><br><span class="line">EB.$once(<span class="string">&quot;献血&quot;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">`学生<span class="subst">$&#123;name&#125;</span>去献血`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学校中事件发生</span></span><br><span class="line">EB.$emit(<span class="string">&#x27;上课&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>); <span class="comment">// 学生张三到上课地点</span></span><br><span class="line">EB.$emit(<span class="string">&#x27;上课&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>); <span class="comment">// 学生李四到上课地点</span></span><br><span class="line">EB.$emit(<span class="string">&#x27;教室上课&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;编程&#x27;</span>); <span class="comment">// 学生张三去教室上编程课</span></span><br><span class="line">EB.$emit(<span class="string">&#x27;户外上课&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;田径&#x27;</span>); <span class="comment">// 学生张三去户外上田径课</span></span><br><span class="line">EB.$off(<span class="string">&#x27;户外上课&#x27;</span>, id);</span><br><span class="line">EB.$emit(<span class="string">&#x27;户外上课&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;足球&#x27;</span>);</span><br><span class="line">EB.$emit(<span class="string">&#x27;献血&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>); <span class="comment">// 学生王五去献血</span></span><br><span class="line">EB.$emit(<span class="string">&#x27;献血&#x27;</span>, <span class="string">&#x27;马六&#x27;</span>);</span><br><span class="line"><span class="comment">// console.log(EB)</span></span><br><span class="line">EB.$clear()</span><br><span class="line"><span class="comment">// console.log(EB)</span></span><br></pre></td></tr></table></figure><p>从上面的代码可以大概了解到，事件总线应该具备五种方法，对应着下一部分的API设计</p><h2 id="API设计"><a href="#API设计" class="headerlink" title="API设计"></a>API设计</h2><ul><li>发布消息（emit）<ul><li>能够表示消息类型，可能还携带参数</li></ul></li><li>订阅消息（on）<ul><li>能够知道具体的消息类型，并执行回调，回调的参数就是发布消息时携带的参数</li></ul></li><li>取消订阅（off）<ul><li>能够知道具体的消息类型，取消订阅该消息类型，即回调函数不再执行</li></ul></li><li>仅订阅一次消息（once）<ul><li>能够知道具体的消息类型，执行一次回调后，再次接收相同消息，不再执行回调</li></ul></li><li>清除某个或所有事件（clear）<ul><li>如果指定了某个消息类型，则清除该消息类型的回调，否则全部清除</li></ul></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h4 id="基础实现（仅包含订阅和发布）"><a href="#基础实现（仅包含订阅和发布）" class="headerlink" title="基础实现（仅包含订阅和发布）"></a>基础实现（仅包含订阅和发布）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventBus</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.eventObj = &#123;&#125;; <span class="comment">// interface EveneObj &#123; [name: string]: Function[] &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $on(name, callback) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.eventObj[name]) &#123;</span><br><span class="line">           <span class="comment">// 如果尚未注册，用数组来收集回调函数</span></span><br><span class="line">            <span class="built_in">this</span>.eventObj[name] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.eventObj[name].push(callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $emit(name) &#123;</span><br><span class="line">        <span class="keyword">const</span> eventList = <span class="built_in">this</span>.eventObj[name];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> callback <span class="keyword">of</span> eventList) &#123;</span><br><span class="line">           <span class="comment">// 执行回调</span></span><br><span class="line">            callback(<span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> EB = <span class="keyword">new</span> EventBus();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅事件</span></span><br><span class="line">EB.$on(<span class="string">&#x27;上课&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">&quot;该上课了&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">EB.$on(<span class="string">&quot;上课&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">&quot;做笔记&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">EB.$on(<span class="string">&quot;下课&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">&quot;下课啦！&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布事件</span></span><br><span class="line">EB.$emit(<span class="string">&#x27;上课&#x27;</span>);</span><br><span class="line">EB.$emit(<span class="string">&#x27;下课&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="如何在发布消息时携带参数"><a href="#如何在发布消息时携带参数" class="headerlink" title="如何在发布消息时携带参数"></a>如何在发布消息时携带参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$on(name, callback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.eventObj[name]) &#123;</span><br><span class="line">       <span class="built_in">this</span>.eventObj[name] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.eventObj[name].push(callback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$emit(name, ...args) &#123;</span><br><span class="line">    <span class="keyword">const</span> eventList = <span class="built_in">this</span>.eventObj[name];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> callback <span class="keyword">of</span> eventList) &#123;</span><br><span class="line">      callback(...args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一次订阅"><a href="#一次订阅" class="headerlink" title="一次订阅"></a>一次订阅</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加新的数据结构</span></span><br><span class="line"><span class="built_in">this</span>.onceObj = &#123;&#125;; <span class="comment">// interface OnceEventObj &#123; [key: string]: Function[] &#125;</span></span><br><span class="line"></span><br><span class="line">$once(eventName, callback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.onceObj[eventName]) &#123;</span><br><span class="line">      <span class="built_in">this</span>.onceObj[eventName] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.onceObj[eventName].push(callback)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="取消订阅"><a href="#取消订阅" class="headerlink" title="取消订阅"></a>取消订阅</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里引入一个id参数，标识每个回调，同时修改eventObj的结构</span></span><br><span class="line"><span class="comment">// interface EventObj &#123; [key: string]: &#123; [id: number]: Function &#125; &#125;</span></span><br><span class="line">$off(eventName, id) &#123;</span><br><span class="line">    <span class="keyword">if</span> (id) &#123;</span><br><span class="line">        <span class="comment">// 传入了id则删除对应的回调</span></span><br><span class="line">        <span class="keyword">delete</span> <span class="built_in">this</span>.eventObj[eventName][id];</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Object</span>.keys(<span class="built_in">this</span>.eventObj[eventName]).length) &#123;</span><br><span class="line">          <span class="keyword">delete</span> <span class="built_in">this</span>.eventObj[eventName];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 否则删除整个事件的所有回调</span></span><br><span class="line">        <span class="keyword">delete</span> <span class="built_in">this</span>.eventObj[eventName];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="清除事件"><a href="#清除事件" class="headerlink" title="清除事件"></a>清除事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$clear(eventName: string = <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 未提供事件名称，默认清除所有事件</span></span><br><span class="line">    <span class="keyword">if</span> (!eventName) &#123;</span><br><span class="line">        <span class="built_in">this</span>.eventObj = &#123;&#125;;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 清除指定事件</span></span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">this</span>.eventObj[eventName];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="终版（TS版本）"><a href="#终版（TS版本）" class="headerlink" title="终版（TS版本）"></a>终版（TS版本）</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> EventObj &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: &#123; [id: <span class="built_in">number</span>]: <span class="built_in">Function</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> OnceEventObj &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: <span class="built_in">Function</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventBus</span> </span>&#123;</span><br><span class="line">    <span class="attr">eventObj</span>: EventObj</span><br><span class="line">    <span class="comment">/** 每个函数的ID */</span></span><br><span class="line">    <span class="attr">callbcakId</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">onceObj</span>: OnceEventObj</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.eventObj = &#123;&#125;;</span><br><span class="line">        <span class="built_in">this</span>.callbcakId = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.onceObj = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $on(eventName: <span class="built_in">string</span>, <span class="attr">callback</span>: <span class="built_in">Function</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.eventObj[eventName]) &#123;</span><br><span class="line">            <span class="built_in">this</span>.eventObj[eventName] = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> id = <span class="built_in">this</span>.callbcakId++;</span><br><span class="line">        <span class="built_in">this</span>.eventObj[eventName][id] = callback;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $emit(eventName: <span class="built_in">string</span>, ...args: <span class="built_in">any</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> eventList = <span class="built_in">this</span>.eventObj[eventName];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> id <span class="keyword">in</span> eventList) &#123;</span><br><span class="line">            <span class="keyword">typeof</span> eventList[id] === <span class="string">&#x27;function&#x27;</span> &amp;&amp; eventList[id](...args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> onceEvent = <span class="built_in">this</span>.onceObj[eventName];</span><br><span class="line">        <span class="keyword">if</span> (onceEvent) &#123;</span><br><span class="line">            onceEvent.forEach(<span class="function">(<span class="params">callback</span>) =&gt;</span> callback(...args));</span><br><span class="line">            <span class="keyword">delete</span> <span class="built_in">this</span>.onceObj[eventName];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $off(eventName: <span class="built_in">string</span>, <span class="attr">id</span>: <span class="built_in">number</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (id) &#123;</span><br><span class="line">            <span class="comment">// 传入了id则删除对应的回调</span></span><br><span class="line">            <span class="keyword">delete</span> <span class="built_in">this</span>.eventObj[eventName][id];</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">Object</span>.keys(<span class="built_in">this</span>.eventObj[eventName]).length) &#123;</span><br><span class="line">                <span class="keyword">delete</span> <span class="built_in">this</span>.eventObj[eventName];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 否则删除整个事件的所有回调</span></span><br><span class="line">            <span class="keyword">delete</span> <span class="built_in">this</span>.eventObj[eventName];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $once(eventName: <span class="built_in">string</span>, <span class="attr">callback</span>: <span class="built_in">Function</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.onceObj[eventName]) &#123;</span><br><span class="line">            <span class="built_in">this</span>.onceObj[eventName] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.onceObj[eventName].push(callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $clear(eventName: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 未提供事件名称，默认清除所有事件</span></span><br><span class="line">        <span class="keyword">if</span> (!eventName) &#123;</span><br><span class="line">            <span class="built_in">this</span>.eventObj = &#123;&#125;;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 清除指定事件</span></span><br><span class="line">        <span class="keyword">delete</span> <span class="built_in">this</span>.eventObj[eventName];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> EB = <span class="keyword">new</span> EventBus();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅事件</span></span><br><span class="line">EB.$on(<span class="string">&#x27;上课&#x27;</span>, <span class="function">(<span class="params">name: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">`学生<span class="subst">$&#123;name&#125;</span>到上课地点`</span>);</span><br><span class="line">&#125;)</span><br><span class="line">EB.$on(<span class="string">&quot;教室上课&quot;</span>, <span class="function">(<span class="params">name: <span class="built_in">string</span>, course: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">`学生<span class="subst">$&#123;name&#125;</span>去教室上<span class="subst">$&#123;course&#125;</span>课`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> id = EB.$on(<span class="string">&quot;户外上课&quot;</span>, <span class="function">(<span class="params">name: <span class="built_in">string</span>, course: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">`学生<span class="subst">$&#123;name&#125;</span>去户外上<span class="subst">$&#123;course&#125;</span>课`</span>);</span><br><span class="line">&#125;)</span><br><span class="line">EB.$once(<span class="string">&quot;献血&quot;</span>, <span class="function">(<span class="params">name: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">`学生<span class="subst">$&#123;name&#125;</span>去献血`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布事件</span></span><br><span class="line">EB.$emit(<span class="string">&#x27;上课&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line">EB.$emit(<span class="string">&#x27;上课&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line">EB.$emit(<span class="string">&#x27;教室上课&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;编程&#x27;</span>);</span><br><span class="line">EB.$emit(<span class="string">&#x27;户外上课&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;田径&#x27;</span>);</span><br><span class="line">EB.$off(<span class="string">&#x27;户外上课&#x27;</span>, id);</span><br><span class="line">EB.$emit(<span class="string">&#x27;户外上课&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;足球&#x27;</span>);</span><br><span class="line">EB.$emit(<span class="string">&#x27;献血&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>);</span><br><span class="line">EB.$emit(<span class="string">&#x27;献血&#x27;</span>, <span class="string">&#x27;马六&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(EB)</span><br><span class="line">EB.$clear()</span><br><span class="line"><span class="built_in">console</span>.log(EB)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="为什么不被推荐使用"><a href="#为什么不被推荐使用" class="headerlink" title="为什么不被推荐使用"></a>为什么不被推荐使用</h2><p>事件总线使用起来非常简单，但是！</p><ul><li>随着事件的推移，注册的事件可能越来越多，如果没有及时清理相关事件，整个对象占用的内存会越来越大</li><li>当逻辑变得复杂时大量使用事件总线，会让数据流混乱，难以预测，这样在调试代码时难以定位或修改</li></ul><h2 id="替代方式"><a href="#替代方式" class="headerlink" title="替代方式"></a>替代方式</h2><ul><li>状态提升<ul><li>有时我们需要在兄弟组件间传递数据，这种情况可以把共享<em>状态提升</em>到最近的共同父组件中去</li></ul></li><li>使用状态管理工具<ul><li>主流前端开发框架都有相应的状态管理方案，比如redux、mobx、Vuex</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>替代chrome中的Event.path</title>
    <link href="http://example.com/2022/12/22/%E6%9B%BF%E4%BB%A3chrome%E4%B8%AD%E7%9A%84Event.path/"/>
    <id>http://example.com/2022/12/22/%E6%9B%BF%E4%BB%A3chrome%E4%B8%AD%E7%9A%84Event.path/</id>
    <published>2022-12-22T09:39:41.000Z</published>
    <updated>2023-07-19T01:25:51.882Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="Event-path和Event-composedPath"><a href="#Event-path和Event-composedPath" class="headerlink" title="Event.path和Event.composedPath"></a>Event.path和Event.composedPath</h2><p>在开发过程时，有时需要获取事件冒泡/捕获过程的所有元素，在不同的浏览器中，获取的方法可能不一样</p><p>chrome作为常用的浏览器，可以通过<code>event.path</code>属性来获取，示例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>event.path测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>组织/部门<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;department&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;dev&quot;</span>&gt;</span>研发组<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;administrative&quot;</span>&gt;</span>行政组<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>公关组<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> target = <span class="built_in">document</span>.getElementById(<span class="string">&quot;dev&quot;</span>)</span></span><br><span class="line"><span class="javascript">    target.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> path = evt.path;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;研发组点击事件的path:&#x27;</span>, path)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Chrome</code>(版本：108.0.5359.124)操作结果：</p><p><img src="https://raw.githubusercontent.com/HJY-xh/pictures/master/pictures/202212221729070.png"></p><p><code>Firefox</code>(版本：108.0.1)操作结果：</p><p><img src="https://raw.githubusercontent.com/HJY-xh/pictures/master/pictures/202212221730228.png"></p><p>该属性返回事件路径，但并不是一个标准属性，不过在 <code>chrome</code> 浏览器中存在，而<code>Firefox</code>不存在</p><p>当 <code>Event.path</code> 取不到值时就取 <code>Event.composedPath</code></p><p><code>Event.composedPath</code>的兼容性如下：</p><p><img src="https://raw.githubusercontent.com/HJY-xh/pictures/master/pictures/202212221734027.png"></p><p>在2021年12月份，<code>chrome</code>官方团队发布<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1277431">issue</a>，将要移除<code>event.path</code></p><h2 id="现有项目如何处理"><a href="#现有项目如何处理" class="headerlink" title="现有项目如何处理"></a>现有项目如何处理</h2><p>现有项目和依赖的第三方库/包都有可能受到影响，在这种情况下可以添加polyfill作为成本较小的解决方案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!Event.prototype.path) &#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Event.prototype, <span class="string">&quot;path&quot;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.composedPath();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>如何支持IE？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">e, d, w</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!e.composedPath) &#123;</span><br><span class="line">    e.composedPath = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.path) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.path;</span><br><span class="line">      &#125; </span><br><span class="line">    <span class="keyword">var</span> target = <span class="built_in">this</span>.target;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.path = [];</span><br><span class="line">    <span class="keyword">while</span> (target.parentNode !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.path.push(target);</span><br><span class="line">      target = target.parentNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.path.push(d, w);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.path;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(Event.prototype, <span class="built_in">document</span>, <span class="built_in">window</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Event-path和Event-composedPath&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="Chrome" scheme="http://example.com/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>canvas渲染上下文设置填充样式，在安卓机型上不生效</title>
    <link href="http://example.com/2022/11/03/canvas%E6%B8%B2%E6%9F%93%E4%B8%8A%E4%B8%8B%E6%96%87%E8%AE%BE%E7%BD%AE%E5%A1%AB%E5%85%85%E6%A0%B7%E5%BC%8F%EF%BC%8C%E5%9C%A8%E5%AE%89%E5%8D%93%E6%9C%BA%E5%9E%8B%E4%B8%8A%E4%B8%8D%E7%94%9F%E6%95%88/"/>
    <id>http://example.com/2022/11/03/canvas%E6%B8%B2%E6%9F%93%E4%B8%8A%E4%B8%8B%E6%96%87%E8%AE%BE%E7%BD%AE%E5%A1%AB%E5%85%85%E6%A0%B7%E5%BC%8F%EF%BC%8C%E5%9C%A8%E5%AE%89%E5%8D%93%E6%9C%BA%E5%9E%8B%E4%B8%8A%E4%B8%8D%E7%94%9F%E6%95%88/</id>
    <published>2022-11-03T08:50:03.000Z</published>
    <updated>2022-11-03T08:58:04.691Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="探究起因"><a href="#探究起因" class="headerlink" title="探究起因"></a>探究起因</h2><p>在阅读一些框架源码（比方说Vue)时发现，开发者们使用<code>Object.create(null)</code>来初始化一个新对象，而我们一般在非面向工具链/基建开发时，惯常使用字面量，那么它们有什么区别呢？</p><p><strong>省流：当设置透明度时，尽量使用<code>ctx.fillStyle = &#39;rgb(174, 238, 238, 0.5)&#39;;</code>的形式，而非<code>ctx.fillStyle = &#39;#AEEEEE80&#39;;</code>后者在安卓真机（华为自带浏览器下必现）下无效</strong></p><p>今天客户反馈在安卓机型下打开我们的签署页面，水印的颜色和透明度不管如何设置，都不生效，而IOS的表现正常</p><p>关键代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">ctx.fillStyle = colorRgb(color, transparency);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取颜色的16进制 （颜色+透明度）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>color 颜色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>transparency 透明度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> convertColor = <span class="function">(<span class="params">color: string, transparency: number</span>) =&gt;</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">const</span> getPureColor = <span class="function">(<span class="params">color: string</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> plainColor = color?.substring(<span class="number">1</span>); <span class="comment">// 去掉#</span></span><br><span class="line">        <span class="keyword">const</span> isColorShort = plainColor?.length === <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">return</span> isColorShort ? plainColor.split(<span class="string">&#x27;&#x27;</span>).map(<span class="function"><span class="params">v</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;v&#125;</span><span class="subst">$&#123;v&#125;</span>`</span>).join(<span class="string">&#x27;&#x27;</span>) : plainColor;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">const</span> getAlpha = <span class="function">(<span class="params">transparency: number</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> alpha = <span class="built_in">parseInt</span>(<span class="built_in">String</span>(<span class="number">256</span> * transparency), <span class="number">10</span>).toString(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">return</span> alpha.length &gt; <span class="number">1</span> ? alpha : <span class="string">`0<span class="subst">$&#123;alpha&#125;</span>`</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="string">`#<span class="subst">$&#123;getPureColor(color)&#125;</span><span class="subst">$&#123;getAlpha(transparency)&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以 颜色：#AEEEEE，透明度：0.5 为例，转化后得到结果#AEEEEE80，将结果赋值给ctx.fillStyle，在PC端使用chrome浏览器调试表现正常，但是在安卓真机上无效</p><p>左图为透明度为1，右图透明度为0.2，在华为自带浏览器下测试结果对比图如下：</p><p><img src="https://raw.githubusercontent.com/HJY-xh/pictures/master/pictures/202211031656919.png"></p><p><img src="https://raw.githubusercontent.com/HJY-xh/pictures/master/pictures/202211031656710.png"></p><p>完整demo如下，可以用node起一个服务，在手机上打开：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>canvas颜色和透明度不生效<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vconsole@latest/dist/vconsole.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">new</span> <span class="built_in">window</span>.VConsole();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>);</span></span><br><span class="line"><span class="javascript">            canvas.width = <span class="number">1000</span>;</span></span><br><span class="line"><span class="javascript">            canvas.height = <span class="number">1000</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="javascript">            ctx.font = <span class="string">&quot;20px Microsoft YaHei&quot;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// ctx.fillStyle = convertColor(&#x27;#AEEEEE&#x27;, 0.2);</span></span></span><br><span class="line"><span class="javascript">            ctx.fillStyle = convertColor(<span class="string">&#x27;#AEEEEE&#x27;</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 绘制文字水印</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span></span><br><span class="line"><span class="javascript">                    ctx.fillText(<span class="string">&quot;Hello world&quot;</span>, <span class="number">150</span> * (i), <span class="number">50</span> * (j + <span class="number">1</span>));</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         * 获取颜色的16进制 （颜色+透明度）</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         *</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         * <span class="doctag">@param </span>color 颜色</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         * <span class="doctag">@param </span>transparency 透明度</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         * <span class="doctag">@returns</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript">         */</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> convertColor = <span class="function">(<span class="params">color, transparency</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> getPureColor = <span class="function">(<span class="params">color</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> plainColor = color?.substring(<span class="number">1</span>); <span class="comment">// 去掉#</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> isColorShort = plainColor?.length === <span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> isColorShort ? plainColor.split(<span class="string">&#x27;&#x27;</span>).map(<span class="function"><span class="params">v</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;v&#125;</span><span class="subst">$&#123;v&#125;</span>`</span>).join(<span class="string">&#x27;&#x27;</span>) : plainColor;</span></span><br><span class="line"><span class="javascript">            &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> getAlpha = <span class="function">(<span class="params">transparency</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> alpha = <span class="built_in">parseInt</span>(<span class="built_in">String</span>(<span class="number">256</span> * transparency), <span class="number">10</span>).toString(<span class="number">16</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> alpha.length &gt; <span class="number">1</span> ? alpha : <span class="string">`0<span class="subst">$&#123;alpha&#125;</span>`</span>;</span></span><br><span class="line"><span class="javascript">            &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">`#<span class="subst">$&#123;getPureColor(color)&#125;</span><span class="subst">$&#123;getAlpha(transparency)&#125;</span>`</span>;</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;探究起因&quot;&gt;&lt;a href=&quot;#探究起因&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>探究Safari对于canvas的限制</title>
    <link href="http://example.com/2022/10/25/%E6%8E%A2%E7%A9%B6Safari%E5%AF%B9%E4%BA%8Ecanvas%E7%9A%84%E9%99%90%E5%88%B6/"/>
    <id>http://example.com/2022/10/25/%E6%8E%A2%E7%A9%B6Safari%E5%AF%B9%E4%BA%8Ecanvas%E7%9A%84%E9%99%90%E5%88%B6/</id>
    <published>2022-10-25T03:32:52.000Z</published>
    <updated>2022-10-25T06:29:01.682Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="探究起因"><a href="#探究起因" class="headerlink" title="探究起因"></a>探究起因</h2><p>之前使用<code>canvas</code>做了一个绘制水印的功能，可以简单理解成进入A页面后，从接口获取绘制水印的配置，然后在A页面的某个区域使用<code>canvas</code>加盖一层水印</p><p>开发和测试都在chrome浏览器上进行，期间均表现正常，直到交付给客户几个月后接到反馈，其APP内嵌我们开发的H5页面，先后出现了以下问题：</p><ul><li>Android机型正常进入页面，偶尔水印不加载</li><li>在IOS下打开页面后无法正常加载，控制台有报错</li><li>在华为鸿蒙系统下APP直接闪退</li></ul><p>嚯，问题还挺多，一个比一个严重- -！那接下来看看，是什么问题导致以上现象</p><p><strong>下文使用我另外写的一个demo做演示</strong></p><h2 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h2><h4 id="第一个问题相对来说比较简单，这里简单说说"><a href="#第一个问题相对来说比较简单，这里简单说说" class="headerlink" title="第一个问题相对来说比较简单，这里简单说说"></a>第一个问题相对来说比较简单，这里简单说说</h4><p>使用Android机型进行测试，确实是偶现不加载的情况，经过反复调试，发现在弱网情况下，没有请求接口，这里调整了请求的顺序就解决了</p><h4 id="第二个问题"><a href="#第二个问题" class="headerlink" title="第二个问题"></a>第二个问题</h4><p>一开始在chrome和Firefox下均未复现，后来发现仅在iPhone真机Safari下才能复现，报错如下：</p><p><img src="https://raw.githubusercontent.com/HJY-xh/pictures/master/pictures/202210251104583.png"></p><p>难道ctx是null吗，结合部分代码调试后查看确实没有获取到渲染上下文</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">canvas.width = <span class="number">10000</span>;</span><br><span class="line">canvas.height = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">const</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">ctx.font = <span class="string">&quot;20px Microsoft YaHei&quot;</span>;</span><br></pre></td></tr></table></figure><p>这时想起来Safari对于canvas的使用有一些限制（或者说是优化），印象中该浏览器对于canvas的数量有一定限制，emmm，我的代码中只有一个canvas，应该和这个限制没有关系</p><p>然后我开始搜索Safari对于使用canvas有什么限制/webkit内核对于canvas的限制，好的，没找到什么蛛丝马迹。于是开始面向google编程，翻一翻有没有人遇到过相似的问题</p><p>在一篇文章中有人提到 Safari对于画布大小有限制，于是我修改宽高，均缩小10倍，也就是渲染的区域缩小了100倍，刷新页面后正常加载了！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">canvas.width = <span class="number">1000</span>;</span><br><span class="line">canvas.height = <span class="number">1000</span>;</span><br></pre></td></tr></table></figure><p>问题解决了是针不戳啊，那具体的尺寸是多少等解决完所有问题再研究下</p><h4 id="第三个问题"><a href="#第三个问题" class="headerlink" title="第三个问题"></a>第三个问题</h4><p>APP闪退，刚开始初步判断可能是客户环境webview做了某些处理，和我们H5页面没有什么关系，于是请教APP开发大佬，大佬一顿排查后得出结论：在华为鸿蒙系统下，H5页面渲染太久了，导致闪退</p><p>好家伙，那这个情况还是因为受到了画布大小影响？！</p><p>于是让测试同学在响应系统上通过APP打开H5页面，确实是没有再发生闪退…</p><p><img src="https://raw.githubusercontent.com/HJY-xh/pictures/master/pictures/202210251153265.png"></p><p>那至此bug全部解决</p><h2 id="探究Safari对于canvas的限制"><a href="#探究Safari对于canvas的限制" class="headerlink" title="探究Safari对于canvas的限制"></a>探究Safari对于canvas的限制</h2><p>已知：Safari采用webkit内核</p><p>解：去github上clone一份源码瞅瞅</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/WebKit/WebKit.git</span><br></pre></td></tr></table></figure><p>（下面贴的源码均在<code>Source/WebCore/html/HTMLCanvasElement.cpp</code>文件中，可以直接翻阅，clone下来太久啦）</p><p>Safari 在实现<code>canvas</code>时对内存进行了限制，在不同设备上允许使用的内存不同，具体根据设备 RAM 的大小计算，一旦超出限制，使用 getContext(‘2d’) 将会返回 null</p><p>C++源码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">CanvasRenderingContext2D* <span class="title">HTMLCanvasElement::createContext2d</span><span class="params">(<span class="keyword">const</span> String&amp; type, CanvasRenderingContext2DSettings&amp;&amp; settings)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">ASSERT_UNUSED</span>(HTMLCanvasElement::<span class="built_in">is2dType</span>(type), type);</span><br><span class="line">    <span class="built_in">ASSERT</span>(!m_context);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure we don&#x27;t use more pixel memory than the system can support.</span></span><br><span class="line">    <span class="keyword">size_t</span> requestedPixelMemory = <span class="number">4</span> * <span class="built_in">width</span>() * <span class="built_in">height</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">activePixelMemory</span>() + requestedPixelMemory &gt; <span class="built_in">maxActivePixelMemory</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> message = <span class="built_in">makeString</span>(<span class="string">&quot;Total canvas memory use exceeds the maximum limit (&quot;</span>, <span class="built_in">maxActivePixelMemory</span>() / <span class="number">1024</span> / <span class="number">1024</span>, <span class="string">&quot; MB).&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>().<span class="built_in">addConsoleMessage</span>(MessageSource::JS, MessageLevel::Warning, message);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_context = CanvasRenderingContext2D::<span class="built_in">create</span>(*<span class="keyword">this</span>, <span class="built_in">WTFMove</span>(settings), <span class="built_in">document</span>().<span class="built_in">inQuirksMode</span>());</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE(IOSURFACE_CANVAS_BACKING_STORE)</span></span><br><span class="line">    <span class="comment">// Need to make sure a RenderLayer and compositing layer get created for the Canvas.</span></span><br><span class="line">    <span class="built_in">invalidateStyleAndLayerComposition</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;CanvasRenderingContext2D*&gt;(m_context.<span class="built_in">get</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 <code>canvas</code> 的内存占用空间为 <code>4 * width * height</code>，这里的4指每个像素的RGBA</p><p>允许使用的最大内存空间由 <code>maxActivePixelMemory</code> 这个函数计算，这个函数计算规则如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">HTMLCanvasElement::maxActivePixelMemory</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (maxActivePixelMemoryForTesting)</span><br><span class="line">        <span class="keyword">return</span> *maxActivePixelMemoryForTesting;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">size_t</span> maxPixelMemory;</span><br><span class="line">    <span class="keyword">static</span> std::once_flag onceFlag;</span><br><span class="line">    std::<span class="built_in">call_once</span>(onceFlag, [] &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> PLATFORM(IOS_FAMILY)</span></span><br><span class="line">        maxPixelMemory = <span class="built_in">ramSize</span>() / <span class="number">4</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        maxPixelMemory = std::<span class="built_in">max</span>(<span class="built_in">ramSize</span>() / <span class="number">4</span>, <span class="number">2151</span> * MB);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxPixelMemory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再查找源码对于画布大小的限制：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">size_t</span> <span class="title">maxCanvasArea</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (maxCanvasAreaForTesting)</span><br><span class="line">        <span class="keyword">return</span> *maxCanvasAreaForTesting;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Firefox limits width/height to 32767 pixels, but slows down dramatically before it</span></span><br><span class="line">    <span class="comment">// reaches that limit. We limit by area instead, giving us larger maximum dimensions,</span></span><br><span class="line">    <span class="comment">// in exchange for a smaller maximum canvas size. The maximum canvas size is in device pixels.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> PLATFORM(IOS_FAMILY)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">4096</span> * <span class="number">4096</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">16384</span> * <span class="number">16384</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过实际测试，在iPhone的Safari中，<code>canvas</code>的最大可用宽高确实是4096</p><p>具体可以看参考文章中的<a href="https://blog.csdn.net/lefex/article/details/121072900">Safari难道是下一个IE？兼容性这么“差”</a></p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>另外在chrome、Firefox中，过大的宽高（100000），也无法正常展示，如下所示：</p><p><img src="https://raw.githubusercontent.com/HJY-xh/pictures/master/pictures/202210251358465.png"></p><p><img src="https://raw.githubusercontent.com/HJY-xh/pictures/master/pictures/202210251400897.png"></p><p>没有探讨释放<code>canvas</code>占用的内存，大家有兴趣可以尝试一下</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>MDN</p><p><a href="https://stackoverflow.com/questions/40482586/getcontext2d-returns-null-in-safari-10">stackoverflow</a></p><p><a href="https://blog.csdn.net/lefex/article/details/121072900">Safari难道是下一个IE？兼容性这么“差”</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;探究起因&quot;&gt;&lt;a href=&quot;#探究起因&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>深入探究Object.create（尚未完成）</title>
    <link href="http://example.com/2022/10/17/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%A9%B6Object.create/"/>
    <id>http://example.com/2022/10/17/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%A9%B6Object.create/</id>
    <published>2022-10-17T13:12:03.000Z</published>
    <updated>2022-10-25T06:32:23.764Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="探究起因"><a href="#探究起因" class="headerlink" title="探究起因"></a>探究起因</h2><p>在阅读一些框架源码（比方说Vue)时发现，开发者们使用<code>Object.create(null)</code>来初始化一个新对象，而我们一般在非面向工具链/基建开发时，惯常使用字面量，那么它们有什么区别呢？</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">MDN</a></p><p><a href="https://stackoverflow.com/questions/15518328/is-creating-js-object-with-object-createnull-the-same-as">stackoverflow</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;探究起因&quot;&gt;&lt;a href=&quot;#探究起因&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript中extends用法小结</title>
    <link href="http://example.com/2022/08/22/TypeScript%E4%B8%ADextends%E7%94%A8%E6%B3%95%E5%B0%8F%E7%BB%93/"/>
    <id>http://example.com/2022/08/22/TypeScript%E4%B8%ADextends%E7%94%A8%E6%B3%95%E5%B0%8F%E7%BB%93/</id>
    <published>2022-08-22T14:12:31.000Z</published>
    <updated>2022-08-31T09:17:36.455Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><p><code>extends</code>关键字在TS中有多种用法，单独使用时，常见有以下几种情况</p><ul><li>继承/拓展</li><li>约束</li><li>条件判断</li></ul><h2 id="继承-扩展"><a href="#继承-扩展" class="headerlink" title="继承/扩展"></a>继承/扩展</h2><h4 id="单个-多个接口"><a href="#单个-多个接口" class="headerlink" title="单个/多个接口"></a>单个/多个接口</h4><p>这种用法和类的继承相似，看个🌰</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dog继承Animal并扩展一个run方法</span></span><br><span class="line"><span class="keyword">interface</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="attr">run</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog: Dog = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;狗子&#x27;</span>,</span><br><span class="line">    <span class="attr">run</span>: <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也支持多重继承</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Blackdog <span class="keyword">extends</span> Animal, Dog &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扩展类的接口"><a href="#扩展类的接口" class="headerlink" title="扩展类的接口"></a>扩展类的接口</h4><p>除了上面的常见用法，接口还可以继承类的私有成员和受保护成员，而不仅仅是公共成员</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> state: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Runnable <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    run(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> <span class="title">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> <span class="title">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Error: 缺少属性 state</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monkey</span> <span class="title">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>一个接口可以继承/扩展一个或多个现有接口</li><li>一个接口也可以继承/扩展一个类。如果该类包含私有或受保护成员，则该接口只能由该类或其子类实现</li></ul><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>此处说的约束，一般指泛型约束，即对泛型的类型进行约束控制</p><p>在编写方法的时候，可能会需要对参数的类型做一些限制，比方说入参有一个<code>length</code>属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有约束</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Error: 类型“T”上不存在属性“length”</span></span><br><span class="line">    <span class="keyword">return</span> arg.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行约束</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>&lt;<span class="title">T</span> <span class="title">extends</span> </span>&#123;length: <span class="built_in">number</span>&#125;&gt;(arg: T): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arg.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>和三目表达式类似，看看官网的示例和说明</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SomeType <span class="keyword">extends</span> OtherType ? TrueType : FalseType;</span><br></pre></td></tr></table></figure><blockquote><p>When the type on the left of the <code>extends</code> is assignable to the one on the right, then you’ll get the type in the first branch (the “true” branch); otherwise you’ll get the type in the latter branch (the “false” branch).</p></blockquote><p><strong>如果extends前面的类型能够赋值给extends后面的类型，那么表达式判断为真，否则为假</strong></p><h4 id="常规使用"><a href="#常规使用" class="headerlink" title="常规使用"></a>常规使用</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A1 &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> A2 &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// A的类型为string</span></span><br><span class="line"><span class="keyword">type</span> A = A2 <span class="keyword">extends</span> A1 ? <span class="built_in">string</span> : <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str: A = <span class="string">&#x27;this is string&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>A1，A2两个接口，满足A2的接口一定可以满足A1，所以条件为真，A的类型取string</p><h4 id="结合泛型使用"><a href="#结合泛型使用" class="headerlink" title="结合泛型使用"></a>结合泛型使用</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A1 = <span class="string">&#x27;x&#x27;</span> <span class="keyword">extends</span> <span class="string">&#x27;x&#x27;</span> ? <span class="built_in">string</span> : <span class="built_in">number</span>; <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> A2 = <span class="string">&#x27;x&#x27;</span> | <span class="string">&#x27;y&#x27;</span> <span class="keyword">extends</span> <span class="string">&#x27;x&#x27;</span> ? <span class="built_in">string</span> : <span class="built_in">number</span>; <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> P&lt;T&gt; = T <span class="keyword">extends</span> <span class="string">&#x27;x&#x27;</span> ? <span class="built_in">string</span> : <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">type</span> A3 = P&lt;<span class="string">&#x27;x&#x27;</span> | <span class="string">&#x27;y&#x27;</span>&gt; <span class="comment">// ?</span></span><br></pre></td></tr></table></figure><p>A1、A2的结果也就是常规的用法，很容易得出结果，但是A3结合了泛型，这里有一个<code>Distributive Conditional Types</code>的概念</p><blockquote><p>When conditional types act on a generic type, they become <em>distributive</em> when given a union type</p></blockquote><p><em>如果extends前面的参数是一个泛型类型，当传入该参数的是联合类型，则使用分配律计算最终的结果。分配律是指，将联合类型的联合项拆成单项，分别代入条件类型，然后将每个单项代入得到的结果再联合起来，得到最终的判断结果。</em></p><p>以上面的A3为例，进行推导</p><p>P<T>中T是一个泛型参数。在A3的定义中，给T传入的是’x’和’y’的联合类型’x’ | ‘y’，满足分配律，于是’x’和’y’被拆开，分别代入P<T></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">P&lt;<span class="string">&#x27;x&#x27;</span> | <span class="string">&#x27;y&#x27;</span>&gt; =&gt; P&lt;<span class="string">&#x27;x&#x27;</span>&gt; | P&lt;<span class="string">&#x27;y&#x27;</span>&gt;</span><br><span class="line"><span class="comment">// &#x27;x&#x27;代入得到</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span> <span class="keyword">extends</span> <span class="string">&#x27;x&#x27;</span> ? <span class="built_in">string</span> : <span class="function"><span class="params">number</span> =&gt;</span> <span class="built_in">string</span></span><br><span class="line"><span class="comment">// &#x27;y&#x27;代入得到</span></span><br><span class="line"><span class="string">&#x27;y&#x27;</span> <span class="keyword">extends</span> <span class="string">&#x27;x&#x27;</span> ? <span class="built_in">string</span> : <span class="function"><span class="params">number</span> =&gt;</span> <span class="built_in">number</span></span><br></pre></td></tr></table></figure><p>然后将每一项代入得到的结果联合起来，得到string | number</p><p>满足两个要点即可适用分配律：第一，参数是泛型类型，第二，代入参数的是联合类型</p><h4 id="特殊的never"><a href="#特殊的never" class="headerlink" title="特殊的never"></a>特殊的never</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// never是所有类型的子类型</span></span><br><span class="line"><span class="keyword">type</span> A1 = <span class="built_in">never</span> <span class="keyword">extends</span> <span class="string">&#x27;x&#x27;</span> ? <span class="built_in">string</span> : <span class="built_in">number</span>; <span class="comment">// string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> P&lt;T&gt; = T <span class="keyword">extends</span> <span class="string">&#x27;x&#x27;</span> ? <span class="built_in">string</span> : <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">type</span> A2 = P&lt;<span class="built_in">never</span>&gt; <span class="comment">// never</span></span><br></pre></td></tr></table></figure><p><strong>never被认为是空的联合类型</strong>，也就是说，没有联合项的联合类型，所以还是满足上面的分配律，然而因为没有联合项可以分配，所以<code>P&lt;T&gt;</code>的表达式其实根本就没有执行，所以A2的定义也就类似于永远没有返回的函数一样，是never类型的</p><h4 id="防止条件判断中的分配"><a href="#防止条件判断中的分配" class="headerlink" title="防止条件判断中的分配"></a>防止条件判断中的分配</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> P&lt;T&gt; = [T] <span class="keyword">extends</span> [<span class="string">&#x27;x&#x27;</span>] ? <span class="built_in">string</span> : <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">type</span> A1 = P&lt;<span class="string">&#x27;x&#x27;</span> | <span class="string">&#x27;y&#x27;</span>&gt; <span class="comment">// number</span></span><br><span class="line"><span class="keyword">type</span> A2 = P&lt;<span class="built_in">never</span>&gt; <span class="comment">// string</span></span><br></pre></td></tr></table></figure><p>在条件判断类型的定义中，将泛型参数使用<code>[]</code>括起来，即可阻断条件判断类型的分配，此时，传入参数T的类型将被当做一个整体，不再分配</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.typescripttutorial.net/typescript-tutorial/typescript-extend-interface/">How to Extend Interfaces in TypeScript</a></li><li><a href="https://www.typescripttutorial.net/typescript-tutorial/typescript-generic-constraints/">TypeScript Generic Constraints</a></li><li><a href="https://juejin.cn/post/6998736350841143326">TS关键字extends用法总结</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/2/conditional-types.html">Conditional Types</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;extends&lt;/code&gt;关键字在TS中有多种用法，单独使用时，常见有以下</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="http://example.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript中的any、unknown、never如何理解</title>
    <link href="http://example.com/2022/08/15/TypeScript%E4%B8%AD%E7%9A%84any%E3%80%81unknown%E3%80%81never%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3/"/>
    <id>http://example.com/2022/08/15/TypeScript%E4%B8%AD%E7%9A%84any%E3%80%81unknown%E3%80%81never%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3/</id>
    <published>2022-08-15T13:06:41.000Z</published>
    <updated>2022-08-31T02:51:25.326Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="any"><a href="#any" class="headerlink" title="any"></a>any</h2><p>在TS中使用<code>any</code>类型，可以用来表示允许赋值给变量任意类型，这种方式与直接使用JS没有太大差别，无法享受到TS的类型检查，在可能出错的地方也不会发现错误。</p><p><code>any</code>类型本质上是类型系统的一个逃逸舱，那我们在什么情况下会使用该类型呢？</p><ul><li>无法确定当前类型时</li><li>逐步向TS迁移时</li></ul><p><strong>而在编写代码的过程中，明确知道类型的时候，有时为了偷懒，使用了<code>any</code>，这是一种不好的行为。</strong></p><p>而以下种种原因，可能都会对我们是否使用<code>any</code>有影响：</p><ul><li>添加类型时，需要编写大量代码，而<code>any</code>工作量很少</li><li>已经通过必要的运行时检查以防御性的方式编写了代码，以确保没有错误</li><li>有些参数很难正确输入，但是<code>any</code>更容易</li><li>不知道参数是什么</li><li>类型增加了很多复杂性，有时<code>any</code>更简单</li></ul><p>使用<code>any</code>还会造成类型污染的问题：即<code>any</code>类型的对象会导致后续的属性类型都会变成<code>any</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj: any = &#123; </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Cola&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.name = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h2><p>在TS的3.0版本中，引入了<code>unknown</code>类型，它可以这样理解成：**<code>unknown</code>类型是<code>any</code>的类型安全版本。**</p><p>这意味着如果要在TS中使用<code>unknown</code>类型时，需要知道它所指的类型，也就自然地推导出使用该类型的变量前，需要对该变量的类型进行断言。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">value: unknown</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// @ts-ignore: Object is of type &#x27;unknown&#x27;.</span></span><br><span class="line">  value.toFixed(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Type assertion:</span></span><br><span class="line">  (value <span class="keyword">as</span> number).toFixed(<span class="number">1</span>); <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 缩小为更具体的类型范围，包括 typeof 运算符，instanceof 运算符和自定义类型保护函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">       value.toFixed(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>unknown</code>类型只能被赋值给<code>any</code>类型和<code>unknown</code>类型本身。</p><p>因为只有能够保存任意类型值的容器才能保存<code>unknown</code> 类型的值，所以这个限制很合理。毕竟我们不知道变量中存储了什么类型的值。</p><h2 id="never"><a href="#never" class="headerlink" title="never"></a>never</h2><p><code>never</code>类型表示的是那些永不存在的值的类型，<code>never</code>类型是任何类型的子类型，也可以赋值给任何类型。</p><p>然而，没有类型是<code>never</code>的子类型或可以赋值给<code>never</code>类型（除了<code>never</code>本身之外）,<code>never</code>用于那些永不可发生的情况:</p><ul><li>一个从来不会有返回值的函数（如：如果函数内含有 <code>while(true) &#123;&#125;</code>）；</li><li>一个总是会抛出错误的函数（如：<code>function foo() &#123; throw new Error(&#39;Not Implemented&#39;) &#125;</code>，foo 的返回类型是 never）；</li></ul><h3 id="与-void-的差异"><a href="#与-void-的差异" class="headerlink" title="与 void 的差异"></a>与 void 的差异</h3><p><code>void</code>表示没有任何类型，<code>never</code>表示永远不存在的值的类型</p><h2 id="异同"><a href="#异同" class="headerlink" title="异同"></a>异同</h2><ul><li><code>any</code>和<code>unknown</code>是TS中所谓的顶级类型：当把类型看作是值的集合时，any 和 unknown 是包含所有值的集合</li><li><code>never</code>类型是TS中的底层类型：空集</li></ul><h2 id="以下或许是最佳实践"><a href="#以下或许是最佳实践" class="headerlink" title="以下或许是最佳实践"></a>以下或许是最佳实践</h2><ul><li>如果不是有意忽略类型检查，不使用<code>any</code></li><li>如果要用<code>any</code>，可以考虑用<code>unknown</code>代替（进行断言后使用）</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://wanago.io/2020/01/27/understanding-any-and-unknown-in-typescript-difference-between-never-and-void/">understanding-any-and-unknown-in-typescript-difference-between-never-and-void</a></p></li><li><p><a href="https://mariusschulz.com/blog/the-unknown-type-in-typescript">The unknown Type in TypeScript</a></p></li><li><p><a href="https://www.51cto.com/article/676734.html">使用 TypeScript 中的 Any 类型前，你需要了解的一切</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;any&quot;&gt;&lt;a href=&quot;#any&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="http://example.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript中的一些小技巧</title>
    <link href="http://example.com/2022/07/18/TypeScript%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://example.com/2022/07/18/TypeScript%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/</id>
    <published>2022-07-18T12:18:34.000Z</published>
    <updated>2023-07-19T01:28:11.643Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><p><strong>为什么通常来说类型声明的使用优先于类型断言</strong></p><p>：类型声明更够更有效地帮助我们进行类型检查</p><p>假设有如下定义：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当需要声明一个该类型变量时，可以有两种做法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> student_1: Person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student_2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span></span><br><span class="line">&#125; <span class="keyword">as</span> Person</span><br></pre></td></tr></table></figure><p>在常规情况下声明变量类型，优先使用第一种方式，这样能够帮助我们进行类型检查，这种错误提示显然是非常有用的，而使用断言时，有可能出现某个属性并不在断言的类型中的情况，这种情况下并没有报错</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> student_3: Person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">10</span> <span class="comment">// 报错：“age”不在类型“Person”中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student_4 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">10</span> <span class="comment">// ok</span></span><br><span class="line">&#125; <span class="keyword">as</span> Person</span><br></pre></td></tr></table></figure><p>类型断言只会影响 TypeScript 编译时的类型，类型断言语句在编译结果中会被删除，虽然最终转化出来的js能够运行正常，但这也会让同事感到迷惑</p><p><strong>什么时候使用类型断言？</strong></p><p>：只有你比TypeScript知道得更多的时候</p><p>举个🌰：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;submit-btn&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.sign-confirm-button&#x27;</span>)! <span class="keyword">as</span> HTMLButtonElement;</span><br></pre></td></tr></table></figure><p>由于TypeScript并不能访问到DOM，而作为开发者的我们，明确知道此处是一个按钮，这里就可以合理地断言成<code>HTMLButtonElement</code>，而非自动推断的<code>Element | null</code></p><p><strong>为什么尽量不使用包装类型</strong></p><ul><li><p>string 和 String</p></li><li><p>number 和 Number</p></li><li><p>boolean 和 Boolean</p></li><li><p>symbol 和 Symbol</p></li><li><p>bigint 和 BigInt</p></li></ul><p>用<code>string</code>举例，当我们在在字符串字面量上访问诸如 charAt 之类的方法时，JavaScript 将其包装在一个 String 对象中，调用该方法，然后丢弃该对象:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalCharAt = <span class="built_in">String</span>.prototype.charAt;</span><br><span class="line"><span class="built_in">String</span>.prototype.charAt = <span class="function"><span class="keyword">function</span>(<span class="params">pos</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">this</span>, <span class="keyword">typeof</span> <span class="built_in">this</span>, pos);</span><br><span class="line"> <span class="keyword">return</span> originalCharAt.call(<span class="built_in">this</span>, pos);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;primitive&#x27;</span>.charAt(<span class="number">3</span>));</span><br><span class="line"><span class="comment">//String &#123;&#x27;primitive&#x27;&#125; &#x27;object&#x27; 3</span></span><br><span class="line"><span class="comment">// m</span></span><br></pre></td></tr></table></figure><p>字符串和字符串对象不相等：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;John&quot;</span> === <span class="string">&quot;John&quot;</span>; <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;John&quot;</span> === <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;John&quot;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;John&quot;</span>) === <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;John&quot;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>在 TypeScript 中，可以将字符串基本类型 <code>string</code> 赋值给包装类型 <code>String</code>，但无法反过来将 <code>String</code> 赋值给 <code>string</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNameLength</span>(<span class="params">studentName: <span class="built_in">String</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> studentName.length; <span class="comment">// ok</span></span><br><span class="line">&#125;</span><br><span class="line">getNameLength(<span class="string">&#x27;John&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isStudent</span>(<span class="params">studentName: <span class="built_in">String</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;John&#x27;</span>].includes(studentName); <span class="comment">// 报错：类型“String”的参数不能赋给类型“string”的参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行时的值仍然是原始值，而不是对象，但是 TypeScript 允许这些声明，因为原始类型可以分配给对象包装器，这样看起来有些迷惑，所以最好统一使用原始类型</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;为什么通常来说类型声明的使用优先于类型断言&lt;/strong&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="http://example.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>lodash常用方法</title>
    <link href="http://example.com/2022/05/18/lodash%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2022/05/18/lodash%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2022-05-18T13:08:44.000Z</published>
    <updated>2023-07-19T01:27:24.348Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h2><h3 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h3><p>将数组（array）拆分成多个 <code>size</code> 长度的区块，并将这些区块组成一个新数组。 如果<code>array</code> 无法被分割成全部等长的区块，那么最后剩余的元素将组成一个区块</p><p><strong>入参</strong></p><ol><li><code>array</code> <em>(Array)</em>: 需要处理的数组</li><li><code>[size=1]</code> <em>(number)</em>: 每个数组区块的长度</li></ol><p><strong>返回值</strong></p><p><em>(Array)</em>: 返回一个包含拆分区块的新数组（注：相当于一个二维数组）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> result = _.chunk(arr, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// [ [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ], [ &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27; ], [ &#x27;g&#x27; ] ]</span></span><br></pre></td></tr></table></figure><h3 id="compact"><a href="#compact" class="headerlink" title="compact"></a>compact</h3><p>创建一个新数组，包含原数组中所有的非假值元素。例如<code>false</code>, <code>null</code>,<code>0</code>, <code>&quot;&quot;</code>, <code>undefined</code>, 和 <code>NaN</code> 都是被认为是“假值”</p><p><strong>入参</strong></p><ol><li><code>array</code> <em>(Array)</em>: 需要处理的数组</li></ol><p><strong>返回值</strong></p><p><em>(Array)</em>: 返回过滤掉假值的新数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">undefined</span>, <span class="literal">NaN</span>];</span><br><span class="line"><span class="keyword">const</span> result = _.compact(arr);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// [ &#x27;a&#x27;, true ]</span></span><br></pre></td></tr></table></figure><h3 id="difference"><a href="#difference" class="headerlink" title="difference"></a>difference</h3><p>创建一个具有唯一<code>array</code>值的数组，每个值不包含在其他给定的数组中。（注：即创建一个新数组，这个数组中的值，为第一个数字（<code>array</code> 参数）排除了给定数组中的值。）该方法使用<a href="http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero"><code>SameValueZero</code></a>做相等比较。结果值的顺序是由第一个数组中的顺序确定</p><p><strong>入参</strong></p><ol><li><code>array</code> <em>(Array)</em>: 要检查的数组</li><li><code>[values]</code> <em>(…Array)</em>: 排除的值</li></ol><p><strong>返回值</strong></p><p><em>(Array)</em>: 返回过滤掉假值的新数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">&#x27;可乐&#x27;</span>, <span class="string">&#x27;雪碧&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">&#x27;雪碧&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(_.difference(arr1, arr2)); <span class="comment">// [ &#x27;可乐&#x27; ]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果想要比较引用类型，可以使用`differenceBy`</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [&#123; <span class="attr">name</span>: <span class="string">&#x27;可乐&#x27;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;雪碧&#x27;</span> &#125;];</span><br><span class="line"><span class="keyword">const</span> arr2 = [&#123; <span class="attr">name</span>: <span class="string">&#x27;雪碧&#x27;</span> &#125;];</span><br><span class="line"><span class="built_in">console</span>.log(_.difference(arr1, arr2)); <span class="comment">// [ &#123; name: &#x27;可乐&#x27; &#125;, &#123; name: &#x27;雪碧&#x27; &#125; ]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [&#123; <span class="attr">name</span>: <span class="string">&#x27;可乐&#x27;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;雪碧&#x27;</span> &#125;];</span><br><span class="line"><span class="keyword">const</span> arr2 = [&#123; <span class="attr">name</span>: <span class="string">&#x27;雪碧&#x27;</span> &#125;];</span><br><span class="line"><span class="built_in">console</span>.log(_.differenceBy(arr1, arr2, <span class="function">(<span class="params">item</span>) =&gt;</span> item.name)); <span class="comment">// [ &#123; name: &#x27;可乐&#x27; &#125; ]</span></span><br></pre></td></tr></table></figure><h3 id="flattenDeep"><a href="#flattenDeep" class="headerlink" title="flattenDeep"></a>flattenDeep</h3><p>将<code>array</code>递归为一维数组</p><p><strong>入参</strong></p><ol><li><code>array</code> <em>(Array)</em>: 需要处理的数组</li></ol><p><strong>返回值</strong></p><p><em>(Array)</em>:返回一个的新一维数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>]]];</span><br><span class="line"><span class="keyword">const</span> result = _.flattenDeep(arr);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// [ 0, 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><h3 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h3><p>创建一个去重后的<code>array</code>数组副本。使用了<a href="http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero"><code>SameValueZero</code></a> 做等值比较。只有第一次出现的元素才会被保留</p><p><strong>入参</strong></p><ol><li><code>array</code> <em>(Array)</em>: 要检查的数组</li></ol><p><strong>返回值</strong></p><p><em>(Array)</em>:返回新的去重后的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> result = _.uniq(arr);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// [ 1, 2 ]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果想要去重引用类型，可以使用`unionBy`</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [&#123; <span class="attr">name</span>: <span class="string">&#x27;可乐&#x27;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;可乐&#x27;</span> &#125;];</span><br><span class="line"><span class="built_in">console</span>.log(_.unionBy(arr1, <span class="function">(<span class="params">item</span>) =&gt;</span> item.name)); <span class="comment">// [ &#123; name: &#x27;可乐&#x27; &#125; ]</span></span><br></pre></td></tr></table></figure><h3 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy"></a>groupBy</h3><p>创建一个对象，key 是 <code>iteratee</code> 遍历 <code>collection</code>(集合) 中的每个元素返回的结果。 分组值的顺序是由他们出现在 <code>collection</code>(集合) 中的顺序确定的。每个键对应的值负责生成 key 的元素组成的数组。iteratee 调用 1 个参数： <em>(value)</em></p><p><strong>入参</strong></p><p>1.<code>collection</code> <em>(Array|Object)</em>: 一个用来迭代的集合。</p><p>2.<code>[iteratee=_.identity]</code> <em>(Array|Function|Object|string)</em>: 这个迭代函数用来转换key</p><p><strong>返回值</strong></p><p><em>(Array)</em>:返回新的去重后的数组</p><h2 id="对象操作"><a href="#对象操作" class="headerlink" title="对象操作"></a>对象操作</h2><h3 id="omit"><a href="#omit" class="headerlink" title="omit"></a>omit</h3><p>这个对象由忽略属性之外的<code>object</code>自身和继承的可枚举属性组成</p><p><strong>入参</strong></p><ol><li><code>object</code> <em>(Object)</em>: 来源对象。</li><li><code>[props]</code> <em>(…(string|string[]))</em>: 要被忽略的属性</li></ol><p><strong>返回值</strong></p><p><em>(Object)</em>: 返回一个组成聚合的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object = &#123; <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(_.omit(object, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])); <span class="comment">// &#123; b: &#x27;2&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="omitBy"><a href="#omitBy" class="headerlink" title="omitBy"></a>omitBy</h3><p>这个对象忽略 <code>predicate</code>（断言函数）判断不是真值的属性后，<code>object</code>自身和继承的可枚举属性组成。<code>predicate</code>调用与2个参数：*(value, key)*</p><p><strong>入参</strong></p><ol><li><code>object</code> <em>(Object)</em>: 来源对象</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: 调用每一个属性的函数</li></ol><p><strong>返回值</strong></p><p><em>(Object)</em>: 返回新对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object = &#123; <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(_.omitBy(object, <span class="function">(<span class="params">key, value</span>) =&gt;</span> <span class="keyword">typeof</span> object[value] === <span class="string">&#x27;number&#x27;</span>)); <span class="comment">// &#123; b: &#x27;2&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="pick"><a href="#pick" class="headerlink" title="pick"></a>pick</h3><p>创建一个从 <code>object</code> 中选中的属性的对象</p><p><strong>入参</strong></p><ol><li><code>object</code> <em>(Object)</em>: 来源对象。</li><li><code>[props]</code> <em>(…(string|string[]))</em>: 要被选中的属性</li></ol><p><strong>返回值</strong></p><p><em>(Object)</em>: 返回新对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object = &#123; <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(_.pick(object, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])); <span class="comment">// &#123; a: 1, c: 3 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="pickBy"><a href="#pickBy" class="headerlink" title="pickBy"></a>pickBy</h3><p>创建一个对象，这个对象组成为从 <code>object</code> 中经 <code>predicate</code> 判断为真值的属性。 <code>predicate</code>调用2个参数：*(value, key)*。</p><p><strong>入参</strong></p><ol><li><code>object</code> <em>(Object)</em>: 来源对象。</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: 调用每一个属性的函数</li></ol><p><strong>返回值</strong></p><p><em>(Object)</em>: 返回新对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object = &#123; <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(_.pickBy(object, _.isNumber)); <span class="comment">// &#123; a: 1, c: 3 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>根据 <code>object</code>对象的<code>path</code>路径获取值。 如果解析 value 是 <code>undefined</code> 会以 <code>defaultValue</code> 取代</p><p><strong>入参</strong></p><ol><li><code>object</code> <em>(Object)</em>: 要检索的对象</li><li><code>path</code> <em>(Array|string)</em>: 要获取属性的路径</li><li><code>[defaultValue]</code> <em>(*)</em>: 如果解析值是 <code>undefined</code> ，这值会被返回</li></ol><p><strong>返回值</strong></p><p><em>(*)</em>: 返回解析的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object = &#123; <span class="string">&#x27;a&#x27;</span>: [&#123; <span class="string">&#x27;b&#x27;</span>: &#123; <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span> &#125; &#125;] &#125;;</span><br><span class="line"> </span><br><span class="line">_.get(object, <span class="string">&#x27;a[0].b.c&#x27;</span>); <span class="comment">// 3</span></span><br><span class="line">_.get(object, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]); <span class="comment">// 3</span></span><br><span class="line">_.get(object, <span class="string">&#x27;a.b.c&#x27;</span>, <span class="string">&#x27;default&#x27;</span>); <span class="comment">// &#x27;default&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;数组操作&quot;&gt;&lt;a href=&quot;#数组操作&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>网络相关常见知识点汇总</title>
    <link href="http://example.com/2022/02/19/%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    <id>http://example.com/2022/02/19/%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/</id>
    <published>2022-02-19T08:11:41.000Z</published>
    <updated>2022-02-25T06:55:39.576Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://www.png8.com/imgs/2022/02/7f0a206c63646d10.png" alt="网络相关常见知识点汇总.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/6908327746473033741">「2021」高频前端面试题汇总之计算机网络篇</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;思维导图&quot;&gt;&lt;a href=&quot;#思维导图&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="思维导图" scheme="http://example.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
    <category term="网络" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 如何实现单例模式</title>
    <link href="http://example.com/2022/01/05/JavaScript%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/01/05/JavaScript%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-05T14:56:59.000Z</published>
    <updated>2022-01-06T01:29:52.988Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>单例模式，也叫单子模式，是一种常用的软件设计模式，属于<code>创建型模式</code>的一种。</p><p>保证一个类<code>仅有一个实例</code>，并提供一个访问它的<code>全局访问点</code>。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p><strong>全局变量符合单例模式吗？</strong></p><p>不是。但我们经常会把变量当成单例来使用，看个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br></pre></td></tr></table></figure><p>通过字面量创建对象时，对象<code>person</code>确实是独一无二的，如果该变量在全局作用域下声明，就可以在代码中的任何地方使用它。</p><p>但是全局变量存在一些问题：</p><ul><li>污染命名空间（变量名冲突）</li><li>不易维护 (被覆盖)</li></ul><p>并且随着项目的体积和功能增大，出现问题的概率也会增大。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>首先我们要清楚 JS 是一门<code>没有类</code>的语言，ES6 出现类也是原型的语法糖。也正因为没有类，在 JS 中实现单例模式也只需要一个<code>唯一</code>的对象，这是很自然的做法。</p><p>这里以一个登录弹窗为例，实践一下单例模式。</p><p>假设现在有一个登录按钮，点击后能够出现登录弹窗：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;loginBtn&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先来写创建登录弹窗的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> doCreateLoginModal = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> modal = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  modal.style.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">  modal.textContent = <span class="string">&quot;登录弹窗&quot;</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(modal);</span><br><span class="line">  <span class="keyword">return</span> modal;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来就是单例模式的重点了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getInstance = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> result || (result = fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createLoginModal = getInstance(doCreateLoginModal);</span><br></pre></td></tr></table></figure><p>这里可以发现返回的结果被封装在闭包（内部的函数被保存到了外部）产生的作用域中，外部是访问不到这两个变量的，这就避免了对全局的命名污染。</p><p>先看这段代码中产生的闭包：</p><p>最后一行外部的<code>createLoginModal</code>变量保存了<code>getInstance</code>中的匿名函数，该拥有<code>getInstance</code>作用域的访问权限。</p><p>再仔细看<code>return result || (result = fn.apply(this, arguments));</code>这条语句：</p><p>第一次调用方法时，<code>result</code>为<code>undefined</code>,会执行<code>result = fn.apply(this, arguments)</code>,这里利用传入的<code>fn</code>调用生成登录弹窗的方法生成登录弹窗，并被赋值给<code>result</code>，使得之后<code>createLoginModal</code>再被调用时，返回第一次创建的登录弹窗。</p><p>最后给按钮绑定点击事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loginBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;loginBtn&quot;</span>);</span><br><span class="line"></span><br><span class="line">loginBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> loginModal = createLoginModal();</span><br><span class="line">  loginModal.style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/HJY-xh/plantTrees/blob/master/Demos/%5BJavaScript%5D%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E5%BC%B9%E7%AA%97/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html">完整代码</a></p><h2 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h2><p>惰性单例指的是在需要的时候菜创建对象实例。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F">单例模式-维基百科</a></p><p>书目</p><ul><li><p>JavaScript 设计模式与开发实践</p></li><li><p>JavaScript 设计模式</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>关于懒加载</title>
    <link href="http://example.com/2022/01/05/%E5%85%B3%E4%BA%8E%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <id>http://example.com/2022/01/05/%E5%85%B3%E4%BA%8E%E6%87%92%E5%8A%A0%E8%BD%BD/</id>
    <published>2022-01-05T12:35:12.000Z</published>
    <updated>2023-07-19T01:26:17.329Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="懒加载概念"><a href="#懒加载概念" class="headerlink" title="懒加载概念"></a>懒加载概念</h2><p><strong>懒加载也叫延迟加载，指的是在长网页中延迟加载图像，是一种很好优化网页性能的方式</strong>。</p><p>用户滚动到它们之前不加载，也就是在可视区域之外的图像不会加载。</p><h2 id="使用场景和优势"><a href="#使用场景和优势" class="headerlink" title="使用场景和优势"></a>使用场景和优势</h2><p>在一些电商类的项目中，往往存在大量的图片，比如广告图、商品图等等。图片的数量和体积会影响页面加载速度，而进行图片懒加载优化可以大幅提升用户体验</p><ul><li><p><strong>减少无效资源的加载</strong></p></li><li><p><strong>防止并发加载的资源过多会阻塞JS的加载</strong></p></li></ul><p>可以看出来，懒加载的核心目的就是<strong>提升用户的体验</strong></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h3><p>将页面上的图片的 src 属性设置为项目中引入一个默认的图片路径，而图片的真实路径则设置在<strong>自定义数据属性</strong>中，比如说<code>data-original</code>， 同时监听scroll事件，在scroll事件的回调中，判断需要进行懒加载的图片是否进入可视区域，如果图片在可视区内将图片的 <code>src</code> 属性设置为<code>data-original</code> 的值</p><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Lazyload<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.image-item</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/1.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/2.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/3.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/4.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/5.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/6.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/7.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/8.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/9.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/10.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/11.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/12.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取可视区高度</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> viewHeight = <span class="built_in">document</span>.body.clientHeight;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 懒加载</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">lazyload</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> imgs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;img[data-src][lazyload]&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">Array</span>.prototype.forEach.call(imgs, <span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> rect = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (item.dataset.original === <span class="string">&quot;&quot;</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 用于获得页面中某个元素的左，上，右和下分别相对浏览器视窗的位置</span></span></span><br><span class="line"><span class="javascript">                rect = item.getBoundingClientRect();</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (rect.bottom &gt;= <span class="number">0</span> &amp;&amp; rect.top &lt; viewHeight) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span></span><br><span class="line"><span class="javascript">                    img.src = item.dataset.original;</span></span><br><span class="line"><span class="javascript">                    img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        item.src = img.src;</span></span><br><span class="line"><span class="javascript">                    &#125;;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 移除属性，下次不再遍历</span></span></span><br><span class="line"><span class="javascript">                    item.removeAttribute(<span class="string">&quot;data-src&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 标记已懒加载</span></span></span><br><span class="line"><span class="javascript">                    item.removeAttribute(<span class="string">&quot;lazyload&quot;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 节流，性能优化</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> tiemr = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> that = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> _args = args;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (!tiemr) &#123;</span></span><br><span class="line"><span class="javascript">                    timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        fn.call(that, _args);</span></span><br><span class="line"><span class="javascript">                        timer = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;, delay);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 刚开始还没滚动屏幕时，要先触发一次函数，初始化首页的页面图片</span></span></span><br><span class="line"><span class="javascript">        lazyload();</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.addEventListener(<span class="string">&quot;scroll&quot;</span>, throttle(lazyload, <span class="number">200</span>));</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h3><p>思路一需要去监听 <code>scroll</code> 事件，虽然通过函数节流的方式来阻止高频率的执行函数，但是还是需要去计算高度等属性，而 <strong><code>IntersectionObserver</code></strong> 接口提供了一种异步观察目标元素与其祖先元素或顶级文档<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Viewport">视口</a>（viewport）交叉状态（可见）的方法。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver">相关API介绍</a></p><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Lazyload<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.image-item</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/1.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/2.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/3.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/4.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/5.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/6.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/7.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/8.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/9.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/10.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/11.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-item&quot;</span> <span class="attr">lazyload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;images/12.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> imgs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;img[data-src]&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> config = &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">rootMargin</span>: <span class="string">&#x27;0px&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">threshold</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function">(<span class="params">entries, self</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            entries.forEach(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (entry.isIntersecting) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> img = entry.target</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> src = img.dataset.src</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (src) &#123;</span></span><br><span class="line"><span class="javascript">                        img.src = src</span></span><br><span class="line"><span class="javascript">                        img.removeAttribute(<span class="string">&#x27;data-src&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                        img.removeAttribute(<span class="string">&quot;lazyload&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 解除观察</span></span></span><br><span class="line"><span class="javascript">                    self.unobserve(entry.target)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;, config)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        imgs.forEach(<span class="function">(<span class="params">image</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            observer.observe(image)</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;懒加载概念&quot;&gt;&lt;a href=&quot;#懒加载概念&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript、性能优化" scheme="http://example.com/tags/JavaScript%E3%80%81%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>React Hook解析</title>
    <link href="http://example.com/2021/12/28/React%20Hook%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2021/12/28/React%20Hook%E8%A7%A3%E6%9E%90/</id>
    <published>2021-12-28T12:23:54.000Z</published>
    <updated>2022-01-25T08:34:05.040Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="问题列表"><a href="#问题列表" class="headerlink" title="问题列表"></a>问题列表</h2><p>带着以下问题学习：</p><ul><li>Hook解决了什么问题？</li><li>Hook有哪些优势？</li><li>为什么有Hook？</li><li>useState方括号有什么用？</li><li>为什么每次更新的时候都要运行 Effect?</li><li>useMemo 和 shouldComponentUpdate 有什么区别？</li></ul><h2 id="Hook概述"><a href="#Hook概述" class="headerlink" title="Hook概述"></a>Hook概述</h2><ul><li><p>React 16.8的新增特性</p></li><li><p>它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性（是一些可以让你在函数组件里“钩入” React state 及生命周期等特性的函数）</p></li></ul><h2 id="Hook的动机"><a href="#Hook的动机" class="headerlink" title="Hook的动机"></a>Hook的动机</h2><ul><li>在无需修改组件结构的情况下复用状态逻辑</li></ul><p>在组件之间复用状态逻辑很难</p><p>Hook出现之前，将可复用性行为”附加“到组件的解决方案有<code>render props</code>和<code>高阶组件</code>，但是这类方案需要重新组织组件结构，可能会很麻烦，进而让代码难以理解。</p><ul><li>Hook将组件中相互关联的部分拆分成更小的函数（比如监听事件、请求数据），而并非强制按照生命周期划分</li></ul><p>组件期初很简单，但是逐渐会被状态逻辑和副作用充斥，相关关联且需要对照修改的代码被拆分（监听事件），不相关的代码在同一个方法中（<code>componentDidMount</code>、<code>componentWillUnmount</code>)组合在一起，容易产生bug。</p><ul><li>降低学习门槛</li></ul><p>对class的学习（需要理解JS中的this工作方式）</p><h2 id="Hook使用规则"><a href="#Hook使用规则" class="headerlink" title="Hook使用规则"></a>Hook使用规则</h2><ul><li><p>只能在函数最外层调用Hook。不要在循环、条件判断或者子函数中调用</p><p>  这样能够确保Hook在每一次渲染中都按照同样的顺序被调用</p></li><li><p>只能在React的函数组件中调用Hook（包括自定义的Hook）</p></li></ul><h2 id="常见的Hook"><a href="#常见的Hook" class="headerlink" title="常见的Hook"></a>常见的Hook</h2><ul><li><p>基础 Hook</p><ul><li>useState</li><li>useEffect<ul><li>说明<pre><code>  - 可以把该Hook看做是`componentDidMount`、`componentDidUpdate`、`componentWillUnmout`三个函数的组合  - React保证了每次运行effect的同时，DOM都已经更新完毕  - 与`componentDidMount`或`componentDidUpdate`不同，使用useEffect调度的effect不会阻塞浏览器更新屏幕，这让应用看起来响应更快  - effect中可选的清除机制在组件卸载的时候触发</code></pre></li><li>使用技巧<pre><code>  - 使用多个 Effect 实现关注点分离（按照代码的用途分离它们），React将按照effect声明的顺序一次调用组建的每一个effect  - 跳过 Effect 进行性能优化（第二个参数）</code></pre></li></ul></li><li>useContext<pre><code>接收一个 context 对象（`React.createContext` 的返回值）并返回该 context 的当前值</code></pre></li></ul></li><li><p>额外的 Hook</p><ul><li>useReducer<br>useState 的替代方案。它接收一个形如 <code>(state, action) =&gt; newState</code> 的 reducer，并返回当前的 state 以及与其配套的 dispatch 方法</li><li>useCallback<br>useCallback(fn, deps) 相当于 useMemo(() =&gt; fn, deps)</li><li>useMemo<br>可以把 useMemo 作为性能优化的手段，但不要把它当成语义上的保证<br>可以使用它缓存一些相对耗时的计算，也非常适合用于存储引用类型的数据，可以传入对象字面量，匿名函数等，甚至是 React Element</li><li>useRef<br>useRef 返回一个可变的 ref 对象，其 <code>.current</code> 属性被初始化为传入的参数（initialValue）</li><li>useImperativeHandle<ul><li>useImperativeHandle 可以在使用 ref 时自定义暴露给父组件的实例值</li><li>在大多数情况下，应当避免使用 ref 这样的命令式代码</li><li>useImperativeHandle 应当与 <code>forwardRef</code> 一起使用</li></ul></li><li>useLayoutEffect<br>其函数签名与 useEffect 相同，但它会在所有的 DOM 变更之后同步调用 effect。可以使用它来读取 DOM 布局并同步触发重渲染</li><li>useDebugValue<br>useDebugValue 可用于在 React 开发者工具中显示自定义 hook 的标签,它接受一个格式化函数作为可选的第二个参数。该函数只有在 Hook 被检查时才会被调用。它接受 debug 值作为参数，并且会返回一个格式化的显示值</li></ul></li></ul><h2 id="自定义Hook"><a href="#自定义Hook" class="headerlink" title="自定义Hook"></a>自定义Hook</h2><p>通过自定义 Hook，可以将组件逻辑提取到可重用的函数中</p><p>字应该始终以 use 开头，这样可以一眼看出其符合 Hook 的规则</p><p>自定义 Hook 是一种自然遵循 Hook 设计的约定，而并不是 React 的特性</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li><p>函数组件执行函数<code>renderWithHooks</code></p><ul><li>作用<br>它是调用<code>function组件</code>函数的主要函数，从源码中看，它首先会置空即将调和渲染的<code>workInProgress树</code>的<code>memoizedState</code>和<code>updateQueue</code>，把新的hooks信息挂载到这两个属性上，然后在组件<code>commit阶段</code>，将<code>workInProgress树</code>替换成<code>current树</code>，替换真实的DOM元素节点。并在current树保存hooks信息。</li><li>步骤<ul><li>执行函数组件</li><li>改变<code>ReactCurrentDispatcher</code>对象</li></ul></li></ul></li><li><p>初始化hooks</p><p>  相关hook实际执行的函数:</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">useState: mountState, <span class="comment">// 初始化useState</span></span><br><span class="line"><span class="attr">useEffect</span>: mountEffect, <span class="comment">// 初始化useEffect</span></span><br><span class="line"><span class="attr">useLayoutEffect</span>: mountLayoutEffect, <span class="comment">// 初始化useLayoutEffect</span></span><br><span class="line"><span class="attr">useMemo</span>: mountMemo, <span class="comment">// 初始化useMemo</span></span><br><span class="line"><span class="attr">useReducer</span>: mountReducer, <span class="comment">// 初始化useReducer</span></span><br><span class="line"><span class="attr">useRef</span>: mountRef, <span class="comment">// 初始化useRef</span></span><br><span class="line"><span class="attr">useCallback</span>: mountCallback, <span class="comment">// 初始化useCallback</span></span><br></pre></td></tr></table></figure><p>  <code>mountWorkInProgressHook</code>生成hook链表</p><ul><li>在一个函数组件第一次渲染时，每个hook执行，都会产生一个hook对象，并形成链表结构，绑定在<code>workInProgress</code>的<code>memoizedState</code>属性上</li><li>hook上的状态，绑定在当前hook对象的<code>memoizedState</code>属性上</li><li>对于effect副作用钩子，会绑定在<code>workInProgress.updateQueue</code>上，等到<code>commit阶段</code>，dom树构建完成，再执行每个 effect 副作用钩子。</li></ul></li><li><p>更新hooks</p><p>  相关hook实际执行的函数:</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">useState: updateState, <span class="comment">// 得到最新的state</span></span><br><span class="line"><span class="attr">useEffect</span>: updateEffect, <span class="comment">// 更新updateQueue</span></span><br><span class="line"><span class="attr">useLayoutEffect</span>: updateLayoutEffect,</span><br><span class="line"><span class="attr">useMemo</span>: updateMemo,</span><br><span class="line"><span class="attr">useReducer</span>: updateReducer,</span><br><span class="line"><span class="attr">useRef</span>: updateRef, <span class="comment">// 获取ref对象</span></span><br><span class="line"><span class="attr">useCallback</span>: updateCallback</span><br></pre></td></tr></table></figure><p>  <code>updateWorkInProgressHook</code>更新hook链表，找到对应的hooks</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh-hans.reactjs.org/docs/hooks-intro.html">官方文档</a></p><p><a href="https://juejin.cn/post/6844904165500518414">React Hooks 最佳实践</a></p><p><a href="https://juejin.cn/post/6864438643727433741">react-hooks如何使用？</a></p><p><a href="https://juejin.cn/post/6944863057000529933#heading-0">一文吃透react-hooks原理</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题列表&quot;&gt;&lt;a href=&quot;#问题列表&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="React" scheme="http://example.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>常见的排序算法</title>
    <link href="http://example.com/2021/12/19/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2021/12/19/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2021-12-19T02:41:09.000Z</published>
    <updated>2021-12-23T07:18:00.697Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="常见的排序"><a href="#常见的排序" class="headerlink" title="常见的排序"></a>常见的排序</h2><p><img src="https://s2.loli.net/2021/12/13/JeNhZmiWYlv85Ot.png"></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>说明：重复遍历要排序的数列，一次比较两个元素，按排序顺序交换元素值，不断遍历直到没有再需要交换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bubbleSort = <span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> output = [...input];</span><br><span class="line">    <span class="keyword">const</span> length = output.length;</span><br><span class="line">    <span class="keyword">let</span> hasSwap = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (output[j] &gt; output[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">let</span> temp = output[j];</span><br><span class="line">                output[j] = output[j + <span class="number">1</span>];</span><br><span class="line">                output[j + <span class="number">1</span>] = temp;</span><br><span class="line">                hasSwap = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!hasSwap) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>说明：遍历数组，找到数据应该插入的位置将其插入即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> insertSort = <span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> output = [...input];</span><br><span class="line">    <span class="keyword">const</span> length = output.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> temp = output[i];</span><br><span class="line">        <span class="keyword">let</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; output[j] &gt; temp) &#123;</span><br><span class="line">            output[j + <span class="number">1</span>] = output[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        output[j + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>说明: 每一次从待排序的数据元素中选出最小（或最大）的一个元素，放到已排序数组的末尾</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> selectSort = <span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> output = [...input];</span><br><span class="line">    <span class="keyword">const</span> length = output.length;</span><br><span class="line">    <span class="keyword">let</span> minIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (output[j] &lt; output[minIndex]) &#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = output[i];</span><br><span class="line">        output[i] = input[minIndex];</span><br><span class="line">        output[minIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>说明：归并的的核心思想是分治。它把数组从中间划分成两个数组，一直递归把子数组划分成更小的数组，知道数组中元素个数为1时进行排序。按大小顺序合并两个数组，接着按照递归的顺序返回，不断合并排好序的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mergeSort = <span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> length = input.length;</span><br><span class="line">    <span class="keyword">if</span> (length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> middle = <span class="built_in">Math</span>.floor(length / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">const</span> left = input.slice(<span class="number">0</span>, middle);</span><br><span class="line">    <span class="keyword">const</span> right = input.slice(middle);</span><br><span class="line">    <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> merge = <span class="function">(<span class="params">left, right</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">while</span> (left.length &amp;&amp; right.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left[<span class="number">0</span>] &lt; right[<span class="number">0</span>]) &#123;</span><br><span class="line">            result.push(left.shift());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.push(right.shift());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (left.length) &#123;</span><br><span class="line">        result.push(left.shift());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (right.length) &#123;</span><br><span class="line">        result.push(right.shift());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>说明：它是冒泡排序的一种改进，通过元素之间的比较和交换位置来达到排序的目的。快排在每一轮挑选一个基准元素，把剩下的元素同它进行比较，大于它的放到数列的一边，小于它的放到数列的另一边，一轮比较完成后，整个序列以选取的基准元素位为界，左侧均小于基准元素，右侧均大于基准元素。但左右两侧内部并不是有序的(左右两侧关键字个数也不一定相同)。进而继续将左右两侧分别再以这种方式进行排序，直到将序列拆分的剩余一个关键字为止，整个序列即变成有序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> quickSort = <span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (input.length &lt;= <span class="number">1</span>) &#123; <span class="keyword">return</span> input; &#125;</span><br><span class="line">    <span class="keyword">const</span> left = [];</span><br><span class="line">    <span class="keyword">const</span> right = [];</span><br><span class="line">    <span class="keyword">const</span> middle = input.splice(<span class="built_in">Math</span>.round(input.length / <span class="number">2</span>), <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; input.length; i++) &#123;</span><br><span class="line">        (middle &gt; input[i] ? left : right).push(input[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [...quickSort(left), middle, ...quickSort(right)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;常见的排序&quot;&gt;&lt;a href=&quot;#常见的排序&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript思维导图</title>
    <link href="http://example.com/2021/12/09/TypeScript%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    <id>http://example.com/2021/12/09/TypeScript%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</id>
    <published>2021-12-09T13:34:11.000Z</published>
    <updated>2022-01-06T01:31:21.439Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://s2.loli.net/2021/12/10/GpcItLvliHzMWRA.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>深入理解 TypeScript</p><p><a href="https://www.typescriptlang.org/">https://www.typescriptlang.org/</a></p><p><a href="https://www.tslang.cn/index.html">https://www.tslang.cn/index.html</a></p><p><a href="https://stackoverflow.com/questions/28818849/how-do-the-different-enum-variants-work-in-typescript">https://stackoverflow.com/questions/28818849/how-do-the-different-enum-variants-work-in-typescript</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;思维导图&quot;&gt;&lt;a href=&quot;#思维导图&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="思维导图" scheme="http://example.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>DOM基本操作思维导图</title>
    <link href="http://example.com/2021/11/16/DOM%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2021/11/16/DOM%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2021-11-16T13:01:11.000Z</published>
    <updated>2022-01-06T01:33:50.961Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><p><img src="https://i.loli.net/2021/11/25/pkRSm7J3saNxV2z.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/11/25/pkRS</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="思维导图" scheme="http://example.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>深入了解eval</title>
    <link href="http://example.com/2021/10/26/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3eval/"/>
    <id>http://example.com/2021/10/26/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3eval/</id>
    <published>2021-10-26T11:29:04.000Z</published>
    <updated>2022-01-11T07:50:24.600Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="相关定义和描述"><a href="#相关定义和描述" class="headerlink" title="相关定义和描述"></a>相关定义和描述</h2><p>eval 是全局对象上的一个函数，会把传入的字符串当做 JavaScript 代码执行，它通常被用来执行动态创建的代码。</p><p>语法很简单：</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">eval</span>(string) <span class="comment">// 一个表示 JavaScript 表达式、语句或一系列语句的字符串。表达式可以包含变量与已存在对象的属性。</span></span><br></pre></td></tr></table></figure></blockquote><p>举个🌰</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">&quot;console.log(&#x27;hello, eval&#x27;)&quot;</span>;</span><br><span class="line"><span class="built_in">window</span>.eval(string);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/25/3jKtcFlqQmuZE2G.png"></p><p>先提出问题：eval这个方法很强大，且兼容性很好，但是为什么很少使用？</p><p><img src="https://i.loli.net/2021/10/25/vr74wlehWzH6k8u.png"></p><h2 id="一些特性"><a href="#一些特性" class="headerlink" title="一些特性"></a>一些特性</h2><h3 id="返回最后一个表达式的值"><a href="#返回最后一个表达式的值" class="headerlink" title="返回最后一个表达式的值"></a>返回最后一个表达式的值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="string">&#x27;1+1+1&#x27;</span>)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> string1 = <span class="string">&#x27;let x; x = 1;&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> string2 = <span class="string">&#x27;let x, y; x = 1; y = 2;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="built_in">eval</span>(str);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(string1); <span class="comment">// 1</span></span><br><span class="line">test(string2); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="函数作为字符串被定义时需要”-“和”-“作为前缀和后缀"><a href="#函数作为字符串被定义时需要”-“和”-“作为前缀和后缀" class="headerlink" title="函数作为字符串被定义时需要”(“和”)“作为前缀和后缀"></a>函数作为字符串被定义时需要”(“和”)“作为前缀和后缀</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> funcStr1 = <span class="string">&#x27;function test() &#123;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> funcStr2 = <span class="string">&#x27;(function test() &#123;&#125;)&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">eval</span>(funcStr1)); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">eval</span>(funcStr2)); <span class="comment">// [Function: test]</span></span><br></pre></td></tr></table></figure><h3 id="直接调用和间接调用"><a href="#直接调用和间接调用" class="headerlink" title="直接调用和间接调用"></a>直接调用和间接调用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>, y = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">2</span>, y = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="string">&#x27;x + y&#x27;</span>));  <span class="comment">// 直接调用，使用本地作用域，结果是 4</span></span><br><span class="line">    <span class="keyword">const</span> geval = <span class="built_in">eval</span>; <span class="comment">// 等价于在全局作用域调用</span></span><br><span class="line">    <span class="built_in">console</span>.log(geval(<span class="string">&#x27;x + y&#x27;</span>)); <span class="comment">// 间接调用，使用全局作用域，结果是 2</span></span><br><span class="line">    <span class="built_in">console</span>.log((<span class="number">0</span>, <span class="built_in">eval</span>)(<span class="string">&#x27;this&#x27;</span>)); <span class="comment">// 另一个间接调用的例子</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">0</span>, <span class="built_in">eval</span>)(<span class="string">&#x27;this&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>逗号操作符：对它的每个操作数求值（从左到右），并返回最后一个操作数的值</p></blockquote><p>这里使用逗号操作符，于是返回表达式中的最后一项，然后为eval传入’this’字符串，来立即执行这个表达式，这里其实就是把全局对象给打印出来</p><h2 id="黑魔法"><a href="#黑魔法" class="headerlink" title="黑魔法"></a>黑魔法</h2><h3 id="欺骗词法作用域"><a href="#欺骗词法作用域" class="headerlink" title="欺骗词法作用域"></a>欺骗词法作用域</h3><p><strong>原理：JavaScript中的eval(str)函数可以接受一个字符串为参数，并将字符串内容视为好像在书写时就存在于eval()函数所在位置的代码。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">str, a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">eval</span>(str); <span class="comment">// 欺骗</span></span><br><span class="line">    <span class="built_in">console</span>.log(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">foo(<span class="string">&quot;var b = 3;&quot;</span>, <span class="number">1</span>); <span class="comment">// 1, 3</span></span><br></pre></td></tr></table></figure><p>这个例子中<code>var b = 3;</code>这条语句会被当做本来就在那里，因此foo函数内部的变量b遮蔽了外部的变量b</p><h4 id="严格模式下的表现"><a href="#严格模式下的表现" class="headerlink" title="严格模式下的表现"></a>严格模式下的表现</h4><p>在严格模式下，eval在运行时会有自己的词法作用域，意味着其中的声明无法修改所在的作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">str, a</span>) </span>&#123;</span><br><span class="line"><span class="meta">    &quot;use strict&quot;</span></span><br><span class="line">    <span class="built_in">eval</span>(str);</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="string">&quot;var a = 2;&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="使用时有哪些坑"><a href="#使用时有哪些坑" class="headerlink" title="使用时有哪些坑"></a>使用时有哪些坑</h2><h3 id="eval不容易调试"><a href="#eval不容易调试" class="headerlink" title="eval不容易调试"></a>eval不容易调试</h3><p>调试困难，且可读性非常差（没有行号）</p><p>用chromeDev、VSCode等工具无法打断点调试</p><h3 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h3><p>JavaScript 通常被认为是一门解释型的语言，但是现代的 JavaScript 引擎不再只是解释 JavaScript，也会对其进行编译。</p><p>V8 为了提高 JS的运行性能，在运行之前会先将JS编译为本地的机器码，然后再去执行机器码（JIT）。</p><blockquote><p>现代JavaScript解释器将javascript转换为机器代码。 这意味着任何变量命名的概念都会被删除。 因此，任意一个eval的使用都会强制浏览器进行冗长的变量名称查找，以确定变量在机器代码中的位置并设置其值。 另外，新内容将会通过 eval() 引进给变量， 比如更改该变量的类型，因此会强制浏览器重新执行所有已经生成的机器代码以进行补偿。</p></blockquote><p><strong>eval破坏了JS引擎优化</strong></p><h3 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h3><p>当使用来源不可靠的第三方代码时，无法保证不碰到恶意代码</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval">MDN</a></p><p><a href="https://github.com/mqyqingfeng/blog/issues/3">JavaScript深入之词法作用域和动态作用域</a></p><p><a href="http://nodejs.cn/learn/the-v8-javascript-engine">V8 JavaScript 引擎</a></p><p>《你不知道的JavaScript》 上卷</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;相关定义和描述&quot;&gt;&lt;a href=&quot;#相关定义和描述&quot; class=&quot;head</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="网络攻击" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>Redux和Mobx的异同</title>
    <link href="http://example.com/2021/10/10/Redux%E5%92%8CMobx%E7%9A%84%E5%BC%82%E5%90%8C/"/>
    <id>http://example.com/2021/10/10/Redux%E5%92%8CMobx%E7%9A%84%E5%BC%82%E5%90%8C/</id>
    <published>2021-10-10T11:53:01.000Z</published>
    <updated>2022-02-16T10:07:31.941Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="二者主要概念"><a href="#二者主要概念" class="headerlink" title="二者主要概念"></a>二者主要概念</h2><p><a href="https://hjy-xh.github.io/2021/09/13/MobX%E8%AE%B0%E5%BD%95/">MobX</a></p><p><a href="https://hjy-xh.github.io/2020/12/03/Redux%E8%AE%B0%E5%BD%95/">Redux</a></p><h2 id="函数式编程相关知识"><a href="#函数式编程相关知识" class="headerlink" title="函数式编程相关知识"></a>函数式编程相关知识</h2><p><a href="https://hjy-xh.github.io/2020/11/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0:Javascript%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89/">读书笔记:Javascript函数式编程指南（一）</a></p><p><a href="https://hjy-xh.github.io/2021/01/15/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0:Javascript%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%8C%EF%BC%89/">读书笔记:Javascript函数式编程指南（二）</a></p><p><a href="https://hjy-xh.github.io/2021/03/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0:Javascript%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%89%EF%BC%89/">读书笔记:Javascript函数式编程指南（三）</a></p><p><a href="https://hjy-xh.github.io/2021/04/16/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0:Javascript%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97%EF%BC%88%E5%9B%9B%EF%BC%89/">读书笔记:Javascript函数式编程指南（四）</a></p><h2 id="异同点"><a href="#异同点" class="headerlink" title="异同点"></a>异同点</h2><ul><li><p>设计思想：函数式 VS 面向对象</p><p><code>Redux</code>遵循函数式编程思想，<code>MobX</code>则更多从面向对象和响应式编程的角度来考虑问题</p><p>可以从<code>Redux</code>的<code>reducer</code>中看出来，它就是一个纯函数，只依赖入参：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(state, action) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MobX</code>将状态包装成可观察对象，一但状态对象变更，就重新渲染视图</p></li><li><p>对store管理：单一store VS 多个store</p><p><code>store</code>是应用管理数据的地方，在<code>Redux</code>中，应用的所有数据都集中在一个大的<code>store</code>中；<code>MobX</code>则通常是按照模块来将应用状态划分，在多个独立的<code>store</code>中管理</p></li><li><p>数据可变性：不可变 VS 可变</p><p><code>Redux</code>状态对象通常是不可变的，一般是在原来的状态对象基础上返回一个新的状态对象；<code>MobX</code>则可以直接使用新的值更新状态对象</p></li><li><p>整体差异</p><p><code>Redux</code>提供可以进行时间回溯的开发工具，同时因为它使用纯函数以及更少的抽象，让调试变得更加容易；<code>MobX</code>使用起来相对简单，但是其中有更多的抽象和封装，所以调试起来会更加复杂，同时结果也更难以预测</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://cn.redux.js.org/">Redux 中文官网</a></p><p><a href="https://www.redux.org.cn/">Redux 中文文档</a></p><p><a href="https://juejin.cn/post/6844903562095362056">你需要Mobx还是Redux？</a></p><p><a href="https://tech.youzan.com/mobx_vs_redux/">我为什么从Redux迁移到了Mobx</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;二者主要概念&quot;&gt;&lt;a href=&quot;#二者主要概念&quot; class=&quot;header</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="React" scheme="http://example.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>MobX记录</title>
    <link href="http://example.com/2021/09/23/MobX%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2021/09/23/MobX%E8%AE%B0%E5%BD%95/</id>
    <published>2021-09-23T14:56:31.000Z</published>
    <updated>2022-02-16T10:07:20.179Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客 <a href="https://hjy-xh.github.io/">hjy-xh</a>，转载请申明出处</p></blockquote><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>简单、可扩展的状态管理</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul><li><p>简单直接</p><ul><li>编写无模板的极简代码来精准描述意图</li></ul></li><li><p>轻松实现最优渲染</p><ul><li>所有对数据的变更和使用都会在运行时被追踪到，并构成一个截取所有状态和输出之间关系的依赖树。这样保证了那些依赖于状态的计算只有在真正需要的时候才会运行，就像React组件一样。无需使用记忆化或选择器之类容易出错的次优技巧来对组件进行手动优化。</li></ul></li><li><p>架构自由</p><ul><li>它可以让你在任意UI框架之外管理你的应用状态。这样会使你的代码低耦合、可移植和更加容易测试</li></ul></li></ul><h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><ul><li>Mobx &gt;= 5 版本运行在任何<code>支持 ES6 proxy</code>的浏览器。</li><li>Mobx 4 可以运行在任何支持ES5的浏览器上，而且也讲进行持续地维护。MobX 4 和 5 的API是相同的，并且语义上也能达到相同的效果，只是Mobx 4 存在一些局限性<ul><li>Observable 数组不是真正的数组，所以它们无法通过<code>Array.isArray()</code> 的检查。最常见的处理方法是在传递给第三方库之前，你经常需要先对其进行<code>.slice()</code>操作，从而得到一个浅拷贝的真正数组</li><li>向一个已存在的 observable 对象中添加属性不会被自动捕获。要么使用 observable 映射来替代，要么使用工具函数中方法来对想要动态添加属性的对象进行读/写/迭代</li></ul></li></ul><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ul><li>State(状态)</li></ul><p>状态是驱动应用的数据。</p><p>可以用任何数据结构来存储状态，如JS基本数据类型、引用类型、普通对象、类实例、数组和映射</p><p>通常有像待办事项列表数据这样的<code>领域特定状态</code>，还有像当前已选元素的<code>视图状态</code>（状态就像是有数据的excel表格）</p><ul><li>Action(动作)</li></ul><p>Action(动作)是任意可以改变State(状态)的代码,比如用户事件处理、后端推送数据处理、调度器事件处理等</p><p>使用Action可以更好地组织代码，并防止在无意中修改State</p><p>如果是在严格模式下使用 MobX的话，MobX 会强制只有在动作之中才可以修改状态</p><ul><li>Derivations(派生)</li></ul><p>任何来源是State并且不需要进一步交互的东西都是Derivation<br> 多种形式：</p><ul><li>用户界面</li><li>派生数据，比如剩下的待办事项的数量</li><li>后端集成，比如把变化发送到服务器端<br>两种类型：</li><li>Computed values（计算值） 它们是永远可以使用纯函数从当前可观察状态中衍生出的值</li><li>Reactions（反应）他们是当状态改变时需要自动发生的副作用 (命令式编程和响应式编程之间的桥梁，或者说得更明确一些，它们最终都需要实现I / O 操作)</li></ul><p>黄金法则：如果想创建一个基于当前状态的值时，使用<code>computed</code></p><h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><p>MobX使用单向数据流，利用Action改变State，进而更新所有受影响的View</p><p><img src="https://zh.mobx.js.org/assets/action-state-view.png"></p><ul><li>所有的Derivations将在State改变时自动且原子化的更新，引测不可能观察中间值</li><li>所有的Derivations默认将会同步更新，这意味着Action可以在State改变之后安全的直接获取computed值</li><li>Computed value的更新是惰性的，任何Computed value在需要它们的副作用发生之前都是不激活的</li><li>所有的Computed value都应该是纯函数，它们不应该修改State</li></ul><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>MobX使用<code>Object.defineProperty</code>来拦截对数据的访问，一旦值发生变化，就会调用<code>React</code>的<code>render</code>方法重新渲染视图或者触发<code>autorun</code></p><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><ul><li><p>Autorun</p><ul><li>用法：autorun(effect: (reaction) =&gt; void)</li><li>说明：autorun 函数接受一个函数作为参数，每当该函数所观察的值发生变化时，它都应该运行。 当你自己创建 autorun 时，它也会运行一次</li></ul></li><li><p>Reaction</p><ul><li>用法：<ul><li>5：reaction(() =&gt; data, (data, reaction) =&gt; { sideEffect }, options?)</li><li>6：reaction(() =&gt; value, (value, previousValue, reaction) =&gt; { sideEffect }, options?)</li></ul></li><li>说明：<ul><li>reaction 类似于 autorun，但可以让你更加精细地控制要跟踪的可观察对象。 它接受两个函数作为参数：第一个，data 函数，其是被跟踪的函数并且其返回值将会作为第二个函数，effect 函数，的输入。 重要的是要注意，副作用只会对 data 函数中被访问过的数据做出反应，这些数据可能少于 effect 函数中实际使用的数据</li><li>一般的模式是在 data 函数中返回你在副作用中需要的所有数据， 并以这种方式更精确地控制副作用触发的时机。 与 autorun 不同，副作用在初始化时不会自动运行，而只会在 data 表达式首次返回新值之后运行</li></ul></li></ul></li><li><p>When</p><ul><li>用法：<ul><li>when(predicate: () =&gt; boolean, effect?: () =&gt; void, options?)</li><li>when(predicate: () =&gt; boolean, options?): Promise</li></ul></li><li>说明：when 会观察并运行给定的 predicate 函数，直到其返回 true。 一旦 predicate 返回了 true，给定的 effect 函数就会执行并且自动执行器函数将会被清理掉。</li></ul></li></ul><h2 id="集成React"><a href="#集成React" class="headerlink" title="集成React"></a>集成React</h2><p>MobX 可以独立于 React 运行, 但是他们通常是结合在一起使用</p><p>常用的两个包：</p><ul><li>mobx-react</li><li>mobx-react-lite</li></ul><p><code>mobx-react</code>中引用了<code>mobx-react-lite</code>包，它提供了很多在新项目中不再需要的特性，其中有：</p><ul><li>对于React class components的支持</li><li>Provider 和 inject ，MobX的这些东西在有React.createContext替代后变得不必要了</li><li>特殊的观察对象 propTypes</li></ul><p>要注意 mobx-react 是全量包，也会暴露 mobx-react-lite包中的任何方法,其中包含对函数组件的支持。 如果你使用 mobx-react，那就不要添加 mobx-react-lite 的依赖和引用了</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>区分<code>computed</code>和<code>auturun</code><br>如果想响应式的产生一个可以被其它observer使用的值，使用<code>@compouted</code>;如果想要达到一个效果，使用<code>autorun</code>（打印日志，发起网络请求等这样命令式的副作用）</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cn.mobx.js.org/">MobX 中文文档</a></p><p><a href="https://mobx.js.org/README.html">MobX</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客 &lt;a href=&quot;https://hjy-xh.github.io/&quot;&gt;hjy-xh&lt;/a&gt;，转载请申明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="MobX" scheme="http://example.com/tags/MobX/"/>
    
  </entry>
  
</feed>
